{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"About CodeSpree","text":"<p>Welcome to CodeSpree, an evolving platform designed to make programming approachable and engaging. Whether you're learning Python basics, diving into advanced concepts, or solving fun challenges, CodeSpree is here to spark your curiosity and support your growth.</p>"},{"location":"index.html#who-is-codespree-for","title":"Who Is CodeSpree For?","text":"<ul> <li>Learners: Build a solid foundation with clear, beginner-friendly tutorials.</li> <li>Problem Solvers: Sharpen your skills with hands-on exercises and mini-projects.</li> <li>Tech Enthusiasts: Dive into exciting topics like cryptography and graph theory.</li> </ul>"},{"location":"index.html#why-codespree","title":"Why CodeSpree?","text":"<p>CodeSpree simplifies complex topics into digestible lessons. With practical examples and projects, you'll gain confidence and learn how to apply your knowledge effectively.</p>"},{"location":"index.html#meet-kuai","title":"Meet Kuai","text":"<p>Hi, I\u2019m Kuai, the creator of CodeSpree! With over a decade of experience in tech and finance, I\u2019ve worked at Google, Two Sigma, and Citadel, tackling complex engineering challenges and leading high-performing teams. Currently, I\u2019m a Director of Engineering at Nium, a fintech unicorn. I joined as the founding engineer in the US and scaled the engineering team from 1 person to 4 teams within two years.</p> <p>Outside of my professional work, I\u2019m deeply passionate about mentoring. Over the years, I\u2019ve had the privilege of supporting software engineers and managers in advancing their careers. Many of my mentees have gone on to secure roles at companies such as Google, Meta, Amazon, Citadel, and Two Sigma.</p> <p>CodeSpree is my way of sharing that passion with a broader audience. I believe learning should be accessible, practical, and enjoyable.</p> <p>Let\u2019s connect on LinkedIn and keep learning together!</p> <p></p>"},{"location":"Exercises/mini_projects.html","title":"Mini-Projects","text":"<p>This document contains a collection of mini-projects to enhance your programming skills and understanding of core concepts. These projects are perfect for:</p> <ul> <li>Gaining hands-on experience through real-world simulations.</li> <li>Building confidence and sharpening problem-solving abilities.</li> <li>Creating a portfolio to showcase your coding proficiency.</li> <li>Preparing for technical interviews by tackling practical problems.</li> </ul>"},{"location":"Exercises/mini_projects.html#problem-1-password-strength-checker","title":"Problem 1: Password Strength Checker","text":"<p>Create a function that evaluates password strength based on the following criteria:</p> <p>Weak Password (Return \"weak\"):</p> <ul> <li>Length less than 8 characters, OR</li> <li>Contains only letters, OR</li> <li>Contains only numbers</li> </ul> <p>Medium Password (Return \"medium\"):</p> <ul> <li>Length 8-11 characters, AND</li> <li>Contains at least one letter and one number</li> </ul> <p>Strong Password (Return \"strong\"):</p> <ul> <li>Length 12 or more characters, AND</li> <li>Contains at least one uppercase letter</li> <li>Contains at least one lowercase letter</li> <li>Contains at least one number</li> <li>Contains at least one special character from @#$%^&amp;*!</li> </ul> <p>Examples: <pre><code>Input: \"password123\"\nOutput: \"medium\"\n\nInput: \"abc12\"\nOutput: \"weak\"\n\nInput: \"MySecurePass123!\"\nOutput: \"strong\"\n\nInput: \"11111111\"\nOutput: \"weak\"\n\nInput: \"Pass123!@\"\nOutput: \"medium\"\n</code></pre></p>"},{"location":"Exercises/mini_projects.html#problem-2-validate-credit-card","title":"Problem 2: Validate Credit Card","text":"<p>The Luhn algorithm is a checksum formula used to validate credit card numbers.</p> <p>The checksum of <code>cc_no</code>, a credit card number represented as a string, is computed as follows:</p> <ol> <li>Reverse the order of the digits in <code>cc_no</code> and name it <code>cc_no_reversed</code>.</li> <li>Add up <code>cc_no_reversed[0]</code>, <code>cc_no_reversed[2]</code>, ... and every other even index digit to form the partial sum <code>s1</code></li> <li> <p>Taking <code>cc_no_reversed[1]</code>, <code>cc_no_reversed[3]</code>, ... and every other odd index digit:</p> </li> <li> <p>Multiply each digit by 2. If doubling a digit results in a two digit number, add those digits together to produce a single digit number</p> </li> <li>Sum the partial sums of the even digits to form <code>s2</code></li> </ol> <p>The checksum is <code>s1 + s2</code>. Luhn algorithm determines <code>cc_no</code> is valid when the checksum ends in zero.</p> <p>Example</p> <pre><code>If the credit card number is 49927398716:\n\n1. Reverse the digits: 61789372994\n2. Sum the even index digits: s1 = 6 + 7 + 9 + 7 + 9 + 4 = 42\n3. The odd index digits: 1, 8, 3, 2, 9\n   * Multiply each of them by 2: 2, 16, 6, 4, 18\n   * Sum the digits of each multiplication: 2, 7, 6, 4, 9\n   * s2 = 2 + 7 + 6 + 4 + 9 = 28\n\nThe checksum is s1 + s2 = 70 which ends in zero. So, 49927398716 is valid.\n</code></pre> <p>Your task is to implement the Luhn algorithm.</p>"},{"location":"Exercises/mini_projects.html#problem-3-parking-system","title":"Problem 3: Parking System","text":"<p>Design a parking system for a parking lot with three types of parking spaces: big, medium, and small. Each type has a fixed number of parking slots available.</p> <p>Implement the <code>ParkingSystem</code> class with the following methods:</p> <ul> <li><code>__init__(self, big: int, medium: int, small: int)</code>: Initializes an object of the <code>ParkingSystem</code> class. The constructor accepts three integers representing the number of available parking slots for big, medium, and small cars, respectively.</li> <li><code>addCar(self, car_type: str) -&gt; bool</code>: Checks if there is an available parking slot for the car of the given <code>car_type</code>. If there is an available slot for the given car type, the car is parked, the available slots for that type are reduced by 1, and the method returns <code>True</code>. If no slots are available for the car type, the method returns <code>False</code>.</li> </ul> <p>Example:</p> <pre><code># Initialize the parking system with:\n# 2 slots for big cars, 1 slot for medium cars, and 0 slots for small cars.\nps = ParkingSystem(2, 1, 0)\n\n# Try to park cars of different types.\nprint(ps.addCar(\"big\"))     # Output: True (1 slot for big cars now remaining)\nprint(ps.addCar(\"big\"))     # Output: True (0 slots for big cars now remaining)\nprint(ps.addCar(\"medium\"))  # Output: True (0 slots for medium cars now remaining)\nprint(ps.addCar(\"small\"))   # Output: False (no slots available for small cars)\nprint(ps.addCar(\"medium\"))  # Output: False (no slots available for medium cars)\nprint(ps.addCar(\"big\"))     # Output: False (no slots available for big cars)\n</code></pre>"},{"location":"Exercises/mini_projects.html#problem-4-guess-the-number","title":"Problem 4: Guess the Number","text":"<p>Build a game where the player guesses a number randomly selected by the computer. The game should:</p> <ol> <li>Pick a random number between 1 and 100.</li> <li>Allow the player to make repeated guesses.</li> <li>Provide feedback: \"higher,\" \"lower,\" or \"correct.\"</li> <li>Track and display the number of attempts.</li> <li>Optionally, restart the game for another round after completion.</li> </ol> <p>Examples: <pre><code>Computer: \"Guess a number between 1 and 100.\"\nPlayer: 50\nComputer: \"Higher.\"\nPlayer: 75\nComputer: \"Lower.\"\nPlayer: 63\nComputer: \"Correct! You took 3 attempts.\"\n</code></pre></p>"},{"location":"Exercises/mini_projects.html#problem-5-hangman-game","title":"Problem 5: Hangman Game","text":"<p>Create a Hangman game where:</p> <ol> <li>The computer randomly selects a word from a predefined list.</li> <li>The player has 6 attempts to guess the word, letter by letter.</li> <li>The game displays a hangman figure representing incorrect guesses.</li> <li>Correctly guessed letters appear in their positions; underscores <code>_</code> represent unguessed letters.</li> <li>The game ends when the player either guesses the word or uses all attempts.</li> </ol> <p>Examples: <pre><code>Word: \"python\"\nPlayer guesses: \"a\", \"e\", \"o\"\nDisplay: \"_ _ _ _ o _\"\nRemaining attempts: 4\n\nPlayer guesses: \"p\", \"t\", \"h\", \"n\"\nDisplay: \"p y t h o n\"\nGame Result: Player Wins!\n</code></pre></p>"},{"location":"Exercises/mini_projects.html#problem-6-tic-tac-toe","title":"Problem 6: Tic-Tac-Toe","text":"<p>Build a two-player Tic-Tac-Toe game where:</p> <ol> <li>A 3x3 grid represents the board.</li> <li>Players take turns to place their marker (<code>X</code> or <code>O</code>) in an empty cell.</li> <li>The game ends when one player gets 3 markers in a row, column, or diagonal, or when all cells are filled (tie).</li> <li>A function checks for a win condition after every move.</li> </ol> <p>Examples: <pre><code>Initial board:\n 1 | 2 | 3\n---+---+---\n 4 | 5 | 6\n---+---+---\n 7 | 8 | 9\n\nPlayer 1 (X): Selects position 1\nUpdated board:\n X | 2 | 3\n---+---+---\n 4 | 5 | 6\n---+---+---\n 7 | 8 | 9\n\nPlayer 2 (O): Selects position 5\nUpdated board:\n X | 2 | 3\n---+---+---\n 4 | O | 6\n---+---+---\n 7 | 8 | 9\n\nPlayer 1 (X): Selects position 3\nUpdated board:\n X | 2 | X\n---+---+---\n 4 | O | 6\n---+---+---\n 7 | 8 | 9\n\nPlayer 2 (O): Selects position 9\nUpdated board:\n X | 2 | X\n---+---+---\n 4 | O | 6\n---+---+---\n 7 | 8 | O\n\nPlayer 1 (X): Selects position 2\nUpdated board:\n X | X | X\n---+---+---\n 4 | O | 6\n---+---+---\n 7 | 8 | O\nGame Result: Player 1 Wins!\n</code></pre></p>"},{"location":"Exercises/mini_projects.html#problem-7-exponential-backoff","title":"Problem 7: Exponential Backoff","text":"<p>You are implementing an exponential backoff mechanism commonly used in networking and distributed systems for retrying operations. The goal is to retry an operation multiple times with an exponentially increasing delay between attempts. If all retries fail, return a failure message.</p> <p>Write a function <code>exponential_backoff</code> that takes the following parameters:</p> <ul> <li><code>operation</code>: A callable function that performs the operation and may raise an exception on failure.</li> <li><code>max_retries</code>: An integer representing the maximum number of retry attempts.</li> </ul> <p>The function should:</p> <ol> <li>Retry the <code>operation</code> up to <code>max_retries</code> times if it fails.</li> <li>Use an exponential backoff delay: \\(2^{i-1}\\) seconds for the \\(i^{th}\\) retry (e.g., 1 second for the first retry, 2 seconds for the second retry, etc.).</li> <li>Return the result of the <code>operation</code> if it succeeds within the allowed retries.</li> <li>If all retries fail, raise an exception indicating that the operation failed after all attempts.</li> </ol> <p>Examples:</p> <p>Example 1: Operation succeeds after retries</p> <pre><code>def unreliable_operation():\n    import random\n    if random.random() &lt; 0.5:  # 50% chance of success\n        return \"Success\"\n    raise Exception(\"Operation failed\")\n\nprint(exponential_backoff(unreliable_operation, max_retries=5))\n</code></pre> <p>Output (sample):</p> <pre><code>Attempt 1 failed. Retrying in 1 seconds...\nAttempt 2 failed. Retrying in 2 seconds...\nAttempt 3 succeeded: Success\n</code></pre> <p>Example 2: Operation fails completely</p> <pre><code>def always_failing_operation():\n    raise Exception(\"Operation failed\")\n\nprint(exponential_backoff(always_failing_operation, max_retries=3))\n</code></pre> <p>Output:</p> <pre><code>Attempt 1 failed. Retrying in 1 seconds...\nAttempt 2 failed. Retrying in 2 seconds...\nAttempt 3 failed. Operation failed after 3 attempts.\n</code></pre> <p>Hints</p> <ul> <li>Use <code>time.sleep()</code> for delays between retries.</li> <li>Catch exceptions with <code>try-except</code> blocks during each retry.</li> <li>Compute the delay as \\(2^{i-1}\\) seconds for the \\(i^{th}\\) attempt.</li> </ul> <p></p>"},{"location":"Exercises/programming_exercises.html","title":"Programming Exercises","text":"<p>This document features simple programming exercises to sharpen your skills in foundational concepts like strings, numbers, lists, and algorithms. Ideal for:</p> <ul> <li>Learning a new programming language by implementing hands-on solutions.</li> <li>Refreshing skills in a language you haven\u2019t used recently.</li> <li>Preparing for coding interviews as a stepping stone to platforms like LeetCode or HackerRank.</li> <li>Building confidence with approachable problems before tackling advanced ones.</li> <li>Improving problem-solving, debugging, and optimization skills.</li> <li>Practicing unit testing, a crucial skill for software engineering.</li> </ul>"},{"location":"Exercises/programming_exercises.html#problem-1-vowel-counter","title":"Problem 1: Vowel Counter","text":"<p>Write a program that counts the number of vowels in a given word. Vowels are <code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code> (case-insensitive).</p> <p>Examples: <pre><code>Input: \"hello\"\nOutput: 2\n\nInput: \"EducaTiOn\"\nOutput: 5\n\nInput: \"rhytHm\"\nOutput: 0\n\nInput: \"aQuAriUm\"\nOutput: 5\n\nInput: \"PYTHON\"\nOutput: 1\n\nInput: \"cOmpUtEr\"\nOutput: 3\n\nInput: \"12345abc\"\nOutput: 1\n\nInput: \"\"\nOutput: 0\n\nInput: \"aeiouAEIOU\"\nOutput: 10\n\nInput: \"sTrAwbErrY\"\nOutput: 2\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-2-reverse-a-list","title":"Problem 2: Reverse a List","text":"<p>Write a function to reverse a list of numbers.</p> <p>Examples: <pre><code>Input: [1, 2, 3, 4, 5]\nOutput: [5, 4, 3, 2, 1]\n\nInput: [10, 20, 30]\nOutput: [30, 20, 10]\n\nInput: []\nOutput: []\n\nInput: [7]\nOutput: [7]\n\nInput: [1, 1, 1, 1]\nOutput: [1, 1, 1, 1]\n\nInput: [-1, -2, -3, -4]\nOutput: [-4, -3, -2, -1]\n\nInput: [0, 100, 200]\nOutput: [200, 100, 0]\n\nInput: [3, 5, 2, 9]\nOutput: [9, 2, 5, 3]\n\nInput: [42]\nOutput: [42]\n\nInput: [8, 6, 7, 5, 3, 0, 9]\nOutput: [9, 0, 3, 5, 7, 6, 8]\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-3-string-reversal","title":"Problem 3: String Reversal","text":"<p>Write a function to reverse a string.</p> <p>Examples: <pre><code>Input: \"hello\"\nOutput: \"olleh\"\n\nInput: \"\"\nOutput: \"\"\n\nInput: \"madam\"\nOutput: \"madam\"\n\nInput: \"hello world!\"\nOutput: \"!dlrow olleh\"\n\nInput: \"  abc  \"\nOutput: \"  cba  \"\n\nInput: \"Python\"\nOutput: \"nohtyP\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-4-perfect-square","title":"Problem 4: Perfect Square","text":"<p>Check if a number is a perfect square. A perfect square is a non-negative integer that is the square of another integer.</p> <p>Examples: <pre><code>Input: 25\nOutput: True\nExplanation: 25 (5 * 5 = 25)\n\nInput: 18\nOutput: False\n\nInput: 0\nOutput: True (0 * 0 = 0)\n\nInput: 4\nOutput: True\n\nInput: 15\nOutput: False\n\nInput: 16\nOutput: True\n\nInput: 101\nOutput: False\n\nInput: 10000\nOutput: True\n\nInput: -1\nOutput: False (A perfect square must be non-negative)\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-5-second-largest","title":"Problem 5: Second Largest","text":"<p>Find the second largest number in an array. Assume that the input array contains at least two numbers.</p> <p>Examples: <pre><code>Input: [10, 5, 8, 12]\nOutput: 10\n\nInput: [1, 2, 3, 4, 5]\nOutput: 4\n\nInput: [5, 5, 5, 5]\nOutput: 5\n\nInput: [5, 3, 0, 5]\nOutput: 5\n\nInput: [1, 2]\nOutput: 1\n\nInput: [-1, -2, -3]\nOutput: -2\n\nInput: [5, 10, 15, 20, 25]\nOutput: 20\n\nInput: [3, 1, 4, 2]\nOutput: 3\n\nInput: [0, -1, -2, -3]\nOutput: -1\n\nInput: [42, 35, 35, 42, 35, 35]\nOutput: 42\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-6-digital-root","title":"Problem 6: Digital Root","text":"<p>Add all digits in a number until you get a single digit.</p> <p>Examples: <pre><code>Input: 789\nOutput: 6 (7+8+9=24, 2+4=6)\n\nInput: 1234\nOutput: 1 (1+2+3+4=10, 1+0=1)\n\nInput: 5\nOutput: 5\n\nInput: 100\nOutput: 1\nExplanation: 1 + 0 + 0 = 1.\n\nInput: 456\nOutput: 6\nExplanation: 4 + 5 + 6 = 15, 1 + 5 = 6.\n\nInput: 1001\nOutput: 2\nExplanation: 1 + 0 + 0 + 1 = 2.\n\nInput: 98765\nOutput: 8\nExplanation: 9 + 8 + 7 + 6 + 5 = 35, 3 + 5 = 8.\n\nInput: 123456789\nOutput: 9\nExplanation: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45, 4 + 5 = 9.\n\nInput: 999999999\nOutput: 9\nExplanation: 9 repeated 9 times adds up to 81, 8 + 1 = 9.\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-7-extra-character","title":"Problem 7: Extra Character","text":"<p>Given two strings, <code>A</code> and <code>B</code>, where <code>A</code> is a string that contains all the characters of <code>B</code> in the same order, plus exactly one additional character at a random position, find the extra character in <code>A</code>.</p> <p>Examples: <pre><code>Input: A = \"atcb42c\", B = \"atb42c\"\nOutput: \"c\"\n\nInput: A = \"abcd\", B = \"abc\"\nOutput: \"d\"\n\nInput: A = \"aabbcc\", B = \"aabcc\"\nOutput: \"b\"\n\nInput: A = \"xylophone\", B = \"xylophne\"\nOutput: \"o\"\n\nInput: A = \"12345\", B = \"1234\"\nOutput: \"5\"\n\nInput: A = \"a\", B = \"\"\nOutput: \"a\"\n\nInput: A = \"HellO\", B = \"HelO\"\nOutput: \"l\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-8-number-triangle","title":"Problem 8: Number Triangle","text":"<p>Print a triangle pattern of numbers where each row contains increasing numbers starting from 1.</p> <p>Examples: <pre><code>Input: 1\nOutput:\n1\n\nInput: 3\nOutput:\n1\n1 2\n1 2 3\n\nInput: 5\nOutput:\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n\nInput: 7\nOutput:\n1\n1 2\n1 2 3\n1 2 3 4\n1 2 3 4 5\n1 2 3 4 5 6\n1 2 3 4 5 6 7\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-9-longest-common-prefix","title":"Problem 9: Longest Common Prefix","text":"<p>Write a function to find the longest prefix shared by all strings in an array. A prefix is the beginning part of a string. For example, the prefixes of \"car\" are \"c\", \"ca\", and \"car\".</p> <p>If no common prefix exists, return an empty string \"\".</p> <p>Examples:: <pre><code>Input: [\"beaux\", \"beauty\", \"beat\", \"beam\"]\nOutput: \"bea\"\n\nInput: [\"apple\", \"ape\", \"april\"]\nOutput: \"ap\"\n\nInput: [\"test\", \"testing\", \"tester\"]\nOutput: \"test\"\n\nInput: [\"hello\", \"world\", \"python\"]\nOutput: \"\"\n\nInput: [\"short\", \"longer\", \"different\"]\nOutput: \"\"\n\nInput: [\"prefix\", \"preference\", \"\"]\nOutput: \"\"\n\nInput: [\"test\", \"test\", \"test\"]\nOutput: \"test\"\n\nInput: []\nOutput: \"\"\n\nInput: [\"fun\"]\nOutput: \"fun\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-10-split-array-with-two-sets","title":"Problem 10: Split Array with Two Sets","text":"<p>Given an integer array, the task is to determine whether it can be split into two parts such that each part contains only distinct elements.</p> <p>Examples: <pre><code>Input: [10, 10, 20, 20, 30, 40]\nOutput: True\nExplanation: One possible split into [10, 20, 30] and [10, 20, 40].\nBoth parts have distinct elements.\n\nInput: [1, 1, 1, 1]\nOutput: False\n\nInput: [1, 2, 3, 4, 5, 6]\nOutput: True\nExplanation: One possible split is [1, 2, 3] and [4, 5, 6].\n\nInput: [1, 1, 1, 2, 2, 2]\nOutput: False\nExplanation: No way to split into two parts with distinct elements in each.\n\nInput: [1]\nOutput: True\nExplanation: The array can be split into [1] and an empty set.\n\nInput: []\nOutput: True\nExplanation: An empty array trivially satisfies the condition.\n\nInput: [6, 6]\nOutput: True\nExplanation: The array can be split as [6] and [6].\n\nInput: [3, 4, 3, 4]\nOutput: True\nExplanation: The array can be split as [3, 4] and [3, 4].\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-11-reverse-words","title":"Problem 11: Reverse Words","text":"<p>Given a sentence, reverse the order of words. Trim leading and trailing spaces, and reduce multiple spaces to a single space between words.</p> <p>Examples: <pre><code>Input: \"The quick brown fox\"\nOutput: \"fox brown quick The\"\n\nInput: \"Hello world!\"\nOutput: \"world! Hello\"\n\nInput: \"  Python   is   fun  \"\nOutput: \"fun is Python\"\n\nInput: \"Single\"\nOutput: \"Single\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-12-find-the-missing-number","title":"Problem 12: Find the Missing Number","text":"<p>Given an array containing <code>n</code> distinct numbers taken from the range <code>[0, n]</code>, find the missing number.</p> <p>Examples: <pre><code>Input: [3, 0, 1]\nOutput: 2\n\nInput: [2, 3, 1, 4, 5]\nOutput: 0\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-13-rearrange-vowels","title":"Problem 13: Rearrange Vowels","text":"<p>Write a function to rearrange the vowels in a string in alphabetical order, placing uppercase vowels before lowercase vowels. Keep all consonants in their original positions.</p> <p>Examples: <pre><code>Input: s = \"coding\"\nOutput: \"cidong\"\n\nInput: s = \"AaEeIiOoUu\"\nOutput: \"AEIOUaeiou\"\n\nInput: s = \"alphabet\"\nOutput: \"alphabet\"\n\nInput: s = \"alphabEt\"\nOutput: \"Elphabat\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-14-first-unique-character","title":"Problem 14: First Unique Character","text":"<p>Given a string, find the index of the first unique character. Return <code>-1</code> if no such character exists.</p> <p>Examples: <pre><code>Input: \"lastlasp\"\nOutput: 3\n\nInput: \"sophhpho\"\nOutput: 0\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-15-reverse-digits-of-a-number","title":"Problem 15: Reverse Digits of a Number","text":"<p>Write a function to reverse the digits of an integer.</p> <p>Examples: <pre><code>Input: 12345\nOutput: 54321\n\nInput: -123\nOutput: -321\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-16-minimum-common-value","title":"Problem 16: Minimum Common Value","text":"<p>You are given two sorted integer arrays, <code>nums1</code> and <code>nums2</code>. Both are in non-decreasing order. Find the smallest integer that appears in both arrays. If there is no common element, return <code>-1</code>.</p> <p>Examples: <pre><code>Input: nums1 = [1, 2, 3], nums2 = [2, 4]\nOutput: 2\n\nInput: nums1 = [1, 2, 3, 6], nums2 = [2, 3, 4, 4]\nOutput: 2\n\nInput: nums1 = [1, 3, 5], nums2 = [2, 4, 6]\nOutput: -1\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-17-add-two-numbers-represented-as-strings","title":"Problem 17: Add Two Numbers Represented as Strings","text":"<p>Write a function to add two numbers represented as strings. Return the sum as a string.</p> <p>Examples: <pre><code>Input: num1 = \"123\", num2 = \"456\"\nOutput: \"579\"\n\nInput: num1 = \"999\", num2 = \"1\"\nOutput: \"1000\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-18-sum-of-array-except-self","title":"Problem 18: Sum of Array Except Self","text":"<p>Given an array of integers, return a new array such that each element at index <code>i</code> is the sum of all numbers in the original array except the one at <code>i</code>.</p> <p>Examples: <pre><code>Input: [1, 2, 3, 4, 5]\nOutput: [14, 13, 12, 11, 10]\n\nInput: [3, 2, 1]\nOutput: [3, 4, 5]\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-19-check-for-palindrome","title":"Problem 19: Check for Palindrome","text":"<p>Write a function to check if a given string is a palindrome.</p> <p>Examples: <pre><code>Input:  \"madam\"\nOutput: True\n\nInput: \"hello\"\nOutput: False\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-20-check-if-two-strings-are-anagrams","title":"Problem 20: Check if Two Strings are Anagrams","text":"<p>Write a function to check if two strings are anagrams of each other.</p> <p>Examples: <pre><code>Input: \"listen\", \"silent\"\nOutput: True\n\nInput: \"apple\", \"pale\"\nOutput: False\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-21-phone-number-formatter","title":"Problem 21: Phone Number Formatter","text":"<p>Write a program that formats a 10-digit phone number into the format <code>(XXX) XXX-XXXX</code>.</p> <p>Examples: <pre><code>Input: \"1234567890\"\nOutput: \"(123) 456-7890\"\n\nInput: \"9876543210\"\nOutput: \"(987) 654-3210\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-22-fizzbuzz-string","title":"Problem 22: FizzBuzz String","text":"<p>Write a function <code>fizzbuzz_string(n)</code> that returns a single string containing the FizzBuzz sequence from 1 to <code>n</code>, separated by commas.</p> <ul> <li>For multiples of 3, use \"Fizz\".</li> <li>For multiples of 5, use \"Buzz\".</li> <li>For multiples of both 3 and 5, use \"FizzBuzz\".</li> <li>Otherwise, just use the number itself.</li> </ul> <p>Example: <pre><code>Input: 15\nOutput: \"1,2,Fizz,4,Buzz,Fizz,7,8,Fizz,Buzz,11,Fizz,13,14,FizzBuzz\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-23-diamond-pattern","title":"Problem 23: Diamond Pattern","text":"<p>Print a diamond pattern using asterisks (<code>*</code>).</p> <p>Examples: <pre><code>Input: 3\nOutput:\n  *\n ***\n*****\n ***\n  *\n\nInput: 5\nOutput:\n    *\n   ***\n  *****\n *******\n*********\n *******\n  *****\n   ***\n    *\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-24-check-if-a-string-is-a-pangram","title":"Problem 24: Check if a String is a Pangram","text":"<p>A pangram is a sentence that contains every letter of the English alphabet at least once. Write a function to determine whether a given string is a pangram. The check should be case-insensitive.</p> <p>Examples: <pre><code>Input: \"The quick brown fox jumps over the lazy dog\"\nOutput: True\n\nInput: \"Pack my box with five dozen liquor jugs 1234!!!\"\nOutput: True\nExplanation: Numbers and punctuation are ignored, and all letters are present at least once.\n\nInput: \"The quick brown fox jumps over the la dog\"\nOutput: False\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-25-date-string-formatter","title":"Problem 25: Date String Formatter","text":"<p>Write a function <code>reformat_date(date_str)</code> that takes a string in the format <code>YYYY-MM-DD</code> and returns a string in the format <code>MonthName DD, YYYY</code>, where <code>MonthName</code> is the full English month (e.g., \"January\", \"February\", \u2026).</p> <p>Examples: <pre><code>Input: \"2023-01-15\"\nOutput: \"January 15, 2023\"\n\nInput: \"1999-12-31\"\nOutput: \"December 31, 1999\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-26-compute-double-factorial","title":"Problem 26: Compute Double Factorial","text":"<p>Write a function that computes the double factorial of a given non-negative integer <code>n</code>. The double factorial of <code>n</code>, denoted as <code>n!!</code>, is defined as the product of all integers from 1 to <code>n</code> that have the same parity (odd or even) as <code>n</code>.  </p> <p>Examples: <pre><code>Input: n = 8\nOutput: 384\nExplanation: 8!! = 8 * 6 * 4 * 2 = 384\n\nInput: n = 7\nOutput: 105\nExplanation: 7!! = 7 * 5 * 3 * 1 = 105\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-27-check-derangement","title":"Problem 27: Check Derangement","text":"<p>Write a function to check if one permutation of a string is a derangement of another. A derangement means no character appears in its original position.</p> <p>Examples: <pre><code>Input: s1 = \"abc\", s2 = \"cab\"\nOutput: True\n\nInput: s1 = \"abc\", s2 = \"bac\"\nOutput: False\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-28-check-narcissistic-number","title":"Problem 28: Check Narcissistic Number","text":"<p>Write a function to check if a number is a narcissistic number. A number is narcissistic if the sum of its digits raised to the power of the number of digits equals the number itself.</p> <p>Example: <pre><code>Input: 153\nOutput: True (1^3+5^3+3^3=153)\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-29-count-unique-characters-in-a-string","title":"Problem 29: Count Unique Characters in a String","text":"<p>Write a function that counts the number of unique characters in a string.</p> <p>Examples: <pre><code>Input: \"programming\"\nOutput: 8\n\nInput: \"hello\"\nOutput: 4\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-30-password-validator","title":"Problem 30: Password Validator","text":"<p>Write a function that validates if a password meets all the following rules:</p> <ul> <li>Minimum length of 8 characters</li> <li>Contains at least one uppercase letter</li> <li>Contains at least one lowercase letter</li> <li>Contains at least one digit</li> <li>Contains at least one special character from @#$%^&amp;*!</li> <li>No white-space allowed</li> </ul> <p>Examples: <pre><code>Input: \"Pass123!\"\nOutput: True\n\nInput: \"weakpass\"\nOutput: False\n\nInput: \"NoSpecial123\"\nOutput: False\n\nInput: \"Short1!\"\nOutput: False\n\nInput: \"Pass 123!\"\nOutput: False (contains space)\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-31-most-frequent-digit","title":"Problem 31: Most Frequent Digit","text":"<p>Given a positive integer, determine which digit occurs most frequently. If there is a tie, return the smallest digit.</p> <p>Examples: <pre><code>Input: 112233\nOutput: 1\nExplanation: Digits 1, 2, and 3 occur twice, so the smallest digit (1) is returned.\n\nInput: 9876543211\nOutput: 1\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-32-geometric-sequence","title":"Problem 32: Geometric Sequence","text":"<p>Write a function to generate the first <code>n</code> terms of a geometric progression, given the first term <code>a</code> and common ratio <code>r</code>.</p> <p>Examples: <pre><code>Input: a = 3, r = 2, n = 5\nOutput: [3, 6, 12, 24, 48]\n\nInput: a = 1, r = 0.5, n = 4\nOutput: [1, 0.5, 0.25, 0.125]\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-33-word-chain","title":"Problem 33: Word Chain","text":"<p>A list of words is valid if each word starts with the last letter of the previous word. Write a function to check if the given sequence of words is valid. Assume the words are case-insensitive.</p> <p>Examples: <pre><code>Input: [\"hello\", \"orange\", \"elephant\", \"tree\"]\nOutput: True\nExplanation: \"hello\" -&gt; \"orange\" -&gt; \"elephant\" -&gt; \"tree\".\n\nInput: [\"cat\", \"dog\", \"pig\", \"goat\"]\nOutput: False\nExplanation: \"dog\" does not start with \"t\".\n\nInput: [\"Apple\", \"Elephant\", \"tiger\"]\nOutput: True\nExplanation: Case is ignored, so \"Apple\" -&gt; \"Elephant\" -&gt; \"tiger\" is valid.\n\nInput: [\"zebra\"]\nOutput: True\nExplanation: A single word is trivially valid.\n\nInput: []\nOutput: True\nExplanation: An empty list is trivially valid.\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-34-detect-cyclic-words","title":"Problem 34: Detect Cyclic Words","text":"<p>Write a function to check if two strings are cyclic permutations of each other. Two strings are cyclic permutations if one string can be rotated to match the other.</p> <p>Examples: <pre><code>Input: s1 = \"abcde\", s2 = \"deabc\"\nOutput: True\nExplanation: Rotating \"deabc\" gives \"abcde\".\n\nInput: s1 = \"hello\", s2 = \"lohel\"\nOutput: True\n\nInput: s1 = \"hello\", s2 = \"lolhe\"\nOutput: False\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-35-alternating-sum-of-digits","title":"Problem 35: Alternating Sum of Digits","text":"<p>Write a function to calculate the alternating sum of digits in an integer. Alternate between adding and subtracting each digit from left to right.</p> <p>Examples: <pre><code>Input: 12345\nOutput: 1 - 2 + 3 - 4 + 5 = 3\n\nInput: 9876\nOutput: 9 - 8 + 7 - 6 = 2\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-36-longest-increasing-subarray","title":"Problem 36: Longest Increasing Subarray","text":"<p>A subarray is a contiguous portion of an array. For example, in the array <code>[1, 2, 3, 4]</code>, <code>[1, 2]</code> and <code>[3, 4]</code> are subarrays, but <code>[1, 3]</code> is not because the elements are not contiguous.</p> <p>Write a function to find the length of the longest subarray in a list of integers where the elements are strictly increasing.</p> <p>Examples: <pre><code>Input: [1, 2, 3, 1, 2]\nOutput: 3\nExplanation: The subarray [1, 2, 3] is the longest increasing subarray.\n\nInput: [5, 1, 2, 3, 0]\nOutput: 3\nExplanation: The subarray [1, 2, 3] is the longest.\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-37-peak-indices","title":"Problem 37: Peak Indices","text":"<p>You are given a 0-indexed integer array, <code>nums</code>. You need to find all indices <code>i</code> (except the first and last) such that <code>nums[i] &gt; nums[i - 1]</code> and <code>nums[i] &gt; nums[i + 1]</code>.</p> <p>Examples: <pre><code>Input: [1, 4, 3, 8, 5]\nOutput: [1, 3]\nExplanation: nums[0] and nums[4] cannot be peaks because they are\nthe first and last elements. nums[1] and nums[3] are strictly greater\nthan their neighboring elements.\n\nInput: [2, 4, 4]\nOutput: []\nExplanation: nums[0] and nums[2] cannot be peaks because they are\nthe first and last elements. nums[1] also can not be a peak because\nit is not strictly greater than nums[2].\n\nInput: [5, 2, 3, 1, 4]\nOutput: [2]\n\nInput: [1, 2, 3, 2, 1]\nOutput: [2]\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-38-cyclic-shifting","title":"Problem 38: Cyclic Shifting","text":"<p>You are given a string <code>s</code> and an integer <code>k</code>. Your task is to shift the characters of the string <code>s</code> cyclically to the right by <code>k</code> positions. If the end of the string is reached during the shift, wrap around to the beginning.</p> <p>Write a function that takes <code>s</code> and <code>k</code> as input and returns the resulting string after the cyclic shift.</p> <p>Examples: <pre><code>Input: s = \"hello\", k = 2\nOutput: \"llohe\"\nExplanation:\n  For i = 0, the 2nd character after 'h' is 'l'.\n  For i = 1, the 2nd character after 'e' is 'l'.\n  For i = 2, the 2nd character after 'l' is 'o'.\n  For i = 3, the 2nd character after 'l' is 'h'.\n  For i = 4, the 2nd character after 'o' is 'e'.\n\nInput: s = \"abcdef\", k = 4\nOutput: \"efabcd\"\nExplanation:\n  For i = 0, the 4th character after 'a' is 'e'.\n  For i = 1, the 4th character after 'b' is 'f'.\n  For i = 2, the 4th character after 'c' is 'a'.\n  For i = 3, the 4th character after 'd' is 'b'.\n  For i = 4, the 4th character after 'e' is 'c'.\n  For i = 5, the 4th character after 'f' is 'd'.\n\nInput: s = \"xxxx\", k = 1\nOutput: \"xxxx\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-39-matrix-diagonal-sum","title":"Problem 39: Matrix Diagonal Sum","text":"<p>You are given a square matrix <code>mat</code> of size \\(n \\times n\\). Your task is to return the sum of the matrix diagonals. - Include the primary diagonal (top-left to bottom-right) and the secondary diagonal (top-right to bottom-left). - If the same element is on both diagonals (e.g., the center of an odd-sized matrix), only count it once.</p> <p>Examples: <pre><code>Input: [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\nOutput: 25\nExplanation:\n- Primary diagonal: 1 + 5 + 9 = 15\n- Secondary diagonal: 3 + 5 + 7 = 15\n- Since the center element (5) is counted twice, subtract it once: 15 + 15 - 5 = 25.\n\nInput: [\n  [1, 1, 1, 1],\n  [1, 1, 1, 1],\n  [1, 1, 1, 1],\n  [1, 1, 1, 1]\n]\nOutput: 8\nExplanation:\n- Primary diagonal: 1 + 1 + 1 + 1 = 4\n- Secondary diagonal: 1 + 1 + 1 + 1 = 4\n- No overlap since the matrix has an even size.\nTotal: 4 + 4 = 8\n\nInput: [[5]]\nOutput: 5\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-40-smallest-even-multiple","title":"Problem 40: Smallest Even Multiple","text":"<p>Given a positive integer <code>n</code>, return the smallest positive integer that is a multiple of both <code>2</code> and <code>n</code>.</p> <p>Examples: <pre><code>Input: 5\nOutput: 10\nExplanation: The smallest multiple of both 5 and 2 is 10.\n\nInput: 12\nOutput: 12\nExplanation: The smallest multiple of both 12 and 2 is 12.\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-41-arithmetic-progression","title":"Problem 41: Arithmetic Progression","text":"<p>Given an array of integers, determine if the numbers form an arithmetic progression (a sequence where the difference between consecutive terms is constant).</p> <p>Examples: <pre><code>Input: [3, 7, 11, 15]\nOutput: True\nExplanation: The difference between consecutive terms is 4.\n\nInput: [1, 2, 4]\nOutput: False\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-42-run-length-encoding","title":"Problem 42: Run-Length Encoding","text":"<p>Write a function to compress a string using run-length encoding.</p> <p>Example: <pre><code>Input: \"aaabbc\"\nOutput: \"a3b2c1\"\n\nInput: \"xxxytttttttzxxqqqqqqqqqq\"\nOutput: \"x3y1t7z1x2q10\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-43-majority-element","title":"Problem 43: Majority Element","text":"<p>Given an array of length <code>n</code>, find the majority element. The majority element is the element that appears more than <code>\u230an/2\u230b</code> times. Assume the array always has a majority element.</p> <p>Examples: <pre><code>Input: [3, 2, 3]\nOutput: 3\n\nInput: [4, 8, 10, 8, 8, 8, 4]\nOutput: 8\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-44-longest-monotonic-subarray","title":"Problem 44: Longest Monotonic Subarray","text":"<p>You are given a 0-indexed integer array, <code>nums</code>. A subarray is a contiguous portion of the array. We say a subarray is:</p> <ul> <li>Strictly Increasing if each element is greater than the one before it.</li> <li>Strictly Decreasing if each element is less than the one before it.</li> </ul> <p>Your task is to find the length of the longest subarray that is strictly increasing or strictly decreasing.</p> <p>Examples: <pre><code>Input: [2, 2, 2]\nOutput: 1\nExplanation: No two consecutive elements are strictly increasing or strictly decreasing,\nso the longest valid subarray is just any single element.\n\nInput: [1, 2, 3, 4]\nOutput: 4\nExplanation: The entire array [1, 2, 3, 4] is strictly increasing.\n\nInput: [5, 6, 5, 4, 3, 10]\nOutput: 4\nExplanation: [6, 5, 4, 3] is strictly decreasing (length 4).\n\nInput: [1, 3, 5, 4, 2]\nOutput: 3\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-45-perfect-square","title":"Problem 45: Perfect Square","text":"<p>Given an <code>n x n</code> grid where each cell contains an integer from <code>1</code> to <code>n</code>, determine whether every row and every column contains all integers from <code>1</code> to <code>n</code>.</p> <p>Examples: <pre><code>Input: [[1, 2, 3], [3, 1, 2], [2, 3, 1]]\nOutput: True\nExplanation: In this case, n = 3, and every row and column contains the\nnumbers 1, 2, and 3.\n\nInput: [[1, 2, 2], [3, 1, 2], [2, 3, 1]]\nOutput: False\nExplanation: In this case, n = 3, but the first row has a repeated 2.\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-46-largest-sum-of-non-adjacent-numbers","title":"Problem 46: Largest Sum of Non-Adjacent Numbers","text":"<p>Given a list of integers, write a function that returns the largest sum of two non-adjacent numbers.</p> <p>Examples: <pre><code>Input: [2, 4, 6, 8]\nOutput: 12 (4+8)\n\nInput: [5, 1, 1, 5]\nOutput: 10 (5+5)\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-47-array-rotation","title":"Problem 47: Array Rotation","text":"<p>Rotate an array by <code>k</code> positions to the right.</p> <p>Examples: <pre><code>Input: [1, 2, 3, 4], k = 2\nOutput: [3, 4, 1, 2]\n\nInput: [10, 20, 30, 40, 50], k = 3\nOutput: [30, 40, 50, 10, 20]\n\nInput: [1, 2, 3], k = 0\nOutput: [1, 2, 3]\n\nInput: [1, 2, 3], k = 3\nOutput: [1, 2, 3]\n\nInput: [10, 20, 30, 40, 50], k = 1\nOutput: [50, 10, 20, 30, 40]\n\nInput: [], k = 3\nOutput: []\n\nInput: [7, 8, 9], k = 10\nOutput: [9, 7, 8]\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-48-largest-alphabetical-rotation","title":"Problem 48: Largest Alphabetical Rotation","text":"<p>Given a string <code>s</code>, generate all rotations (cyclic shifts) of <code>s</code> and return the lexicographically largest rotation.</p> <p>Examples: <pre><code>Input: \"abc\"\nOutput: \"cab\"\n\nInput: \"zab\"\nOutput: \"zab\"\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-49-sort-by-age","title":"Problem 49: Sort by Age","text":"<p>Given two arrays - one containing <code>names</code> and another containing corresponding <code>ages</code> - write a function to sort people by their ages in descending order. Return the sorted list of names. Assume the values of <code>ages</code> are distinct.</p> <p>Examples: <pre><code>Input: names = [\"Alice\", \"Bob\", \"Charlie\"], ages = [24, 45, 70]\nOutput: [\"Charlie\", \"Bob\", \"Alice\"]\n\nInput: names = [\"Mark\", \"Emma\", \"Alex\", \"Sarah\"], ages = [75, 18, 41, 65]\nOutput: [\"Mark\", \"Sarah\", \"Alex\", \"Emma\"]\n</code></pre></p>"},{"location":"Exercises/programming_exercises.html#problem-50-partition-string-into-fixed-size-groups","title":"Problem 50: Partition String into Fixed-Size Groups","text":"<p>Given a string <code>s</code>, an integer <code>k</code>, and a fill character <code>fill</code>, partition <code>s</code> into groups of size <code>k</code>. If the length of <code>s</code> is not a multiple of <code>k</code>, pad the final group with the fill character until it has size <code>k</code>. Return all the groups as a list of strings.</p> <p>Examples: <pre><code>Input: s = \"hello\", k = 2, fill = \"*\" \nOutput: [\"he\", \"ll\", \"o*\"]\nExplanation: The remainder has only 'o', so we add one '*' to form a group of size 2.\n\nInput: s = \"abcd123\", k = 3, fill = \"-\"\nOutput: [\"abc\", \"d12\", \"3--\"]\nExplanation: String length is 7, so we need 2 fill characters '-' to complete the last group.\n</code></pre></p>"},{"location":"Miscellaneous/birthday/birthday.html","title":"The Birthday Problem","text":"<p>The birthday problem asks for the probability that, in a set of \\(n\\) randomly chosen people, at least two will share a birthday<sup>1</sup>. We assume that birthdays are distributed equally among all days of the year and neglect leap years.</p>"},{"location":"Miscellaneous/birthday/birthday.html#mathematical-solution","title":"Mathematical Solution","text":"<p>The probability the first two people have different birthdays is 364/365. The probability that the third person has a birthday different from the first two, given the first two people have different birthdays, is 363/365, and so on. So the probability that all of the first n people have different birthdays is</p> \\[ q(n) = \\frac{364}{365}\\cdot \\frac{363}{365}\\cdot \\cdots \\cdot \\frac{365-(n-1)}{365}. \\] <p>The probability that among \\(n\\) people at least two have the same birthday is \\(p(n) = 1 - q(n)\\).</p> <pre><code>def get_probability(n: int) -&gt; float:\n    q = 1.\n    for i in range(1, n):\n        q *= (365 - i) / 365\n    return 1 - q\n</code></pre> <p>Let's experiment with various \\(n\\)'s:</p> <pre><code>def experiment():\n    for n in (1, 5, 10, 20, 22, 23, 30, 40):\n        p = get_probability(n)\n        print(f\"When n = {n}, p(n) = {p * 100:.1f}%\")\n</code></pre> <p>Output:</p> <pre><code>When n = 1, p(n) = 0.0%\nWhen n = 5, p(n) = 2.7%\nWhen n = 10, p(n) = 11.7%\nWhen n = 20, p(n) = 41.1%\nWhen n = 22, p(n) = 47.6%\nWhen n = 23, p(n) = 50.7%\nWhen n = 30, p(n) = 70.6%\nWhen n = 40, p(n) = 89.1%\n</code></pre> <p>Observe that the probability of a shared birthday exceeds \\(50\\%\\) in a group of only 23 people.</p> <p>Question: In reality, birthdays are not completely random. How might this affect the \\(p(n)\\)'s?</p>"},{"location":"Miscellaneous/birthday/birthday.html#simulation","title":"Simulation","text":"<p>The code snippet below is a Monte Carlo simulation of the birthday problem.</p> <pre><code>import random\n\ndef has_same_birthday(n: int) -&gt; bool:\n    seen = set()\n    for _ in range(n):\n        birthday = random.randint(1, 365)\n        if birthday in seen:\n            return True\n        seen.add(birthday)\n    return False\n</code></pre> <p>Sample output for \\(n=23\\):</p> <pre><code>&gt;&gt;&gt; trials = 100_000\n&gt;&gt;&gt; n = 23\n&gt;&gt;&gt; sum(has_same_birthday(n) for _ in range(trials)) / trials\n0.50636\n</code></pre>"},{"location":"Miscellaneous/birthday/birthday.html#reverse-problem","title":"Reverse problem","text":"<p>The reverse problem is to find, for a fixed probability p, the smallest \\(n\\) for which the probability \\(p(n) \\geq p\\).</p> <p>Since \\(p(n)\\) is monotonically increasing, \\(n\\) can be found using binary search:</p> <pre><code>def find_n(p: float) -&gt; int:\n    lo, hi = 0, 366\n    while lo &lt; hi:\n        mid = (lo + hi) // 2\n        if get_probability(mid) &gt;= p:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n</code></pre> <p>Testing with \\(p=0.5\\) gives the expected result:</p> <pre><code>&gt;&gt;&gt; find_n(0.5)\n23\n</code></pre>"},{"location":"Miscellaneous/birthday/birthday.html#average-number-of-distinct-birthdays","title":"Average number of distinct birthdays","text":"<p>The expected number of different birthdays, i.e. the number of days that are at least one person's birthday, can be simulated as follows:</p> <pre><code>def distinct_birthdays(n: int) -&gt; int:\n    birthdays = set()\n    for _ in range(n):\n        birthday = random.randint(1, 365)\n        birthdays.add(birthday)\n    return len(birthdays)\n</code></pre> <p>When there are 1000 people, there will be around 341 different birthdays (around 24 unclaimed birthdays):</p> <pre><code>&gt;&gt;&gt; trials = 50_000\n&gt;&gt;&gt; sum(distinct_birthdays(1000) for _ in range(trials)) / trials)\n341.47882\n</code></pre> <p>The probability that a day is unclaimed by all \\(n\\) days is \\((364/365)^n\\). The expected number of unclaimed days is thus \\(365 \\cdot \\left(\\frac{364}{365}\\right)^n.\\)</p> <p>The expected number of different birthdays is therefore \\(365 \\cdot \\left(1 - \\left(\\frac{364}{365}\\right)^n\\right).\\)</p> <p>When \\(n=1000\\), this number is around \\(341.5\\), which is close to our simulation.</p>"},{"location":"Miscellaneous/birthday/birthday.html#number-of-people-until-every-birthday-is-achieved","title":"Number of people until every birthday is achieved","text":"<p>The expected number of people needed until every birthday is achieved is called the Coupon collector's problem.</p> <p>Here's a Monte Carlo simulation:</p> <pre><code>def population_till_all() -&gt; int:\n    count = 0\n    birthdays = set()\n    while len(birthdays) &lt; 365:\n        count += 1\n        birthday = random.randint(1, 365)\n        birthdays.add(birthday)\n    return count\n</code></pre> <p>Sample output:</p> <pre><code>&gt;&gt;&gt; trials = 50_000\n&gt;&gt;&gt; sum(population_till_all() for _ in range(trials)) / trials\n2363.53902\n</code></pre> <p>So on average it takes more than 2360 people to achieve every birthday.</p>"},{"location":"Miscellaneous/birthday/birthday.html#average-number-of-people-to-get-at-least-one-shared-birthday","title":"Average number of people to get at least one shared birthday","text":"<p>What's the average number of people required to find a pair with the same birthday? Below's a simulation:</p> <pre><code>def till_first_match():\n    count = 0\n    birthdays = set()\n    while True:\n        count += 1\n        birthday = random.randint(1, 365)\n        if birthday in birthdays:\n            return count\n        birthdays.add(birthday)\n</code></pre> <p>Sample output:</p> <pre><code>&gt;&gt;&gt; trials = 50_000\n&gt;&gt;&gt; sum(till_first_match() for _ in range(trials)) / trials\n24.58436\n</code></pre> <p>So on average, only 25 people are required to have two people with the same birthday.</p> <p></p> <ol> <li> <p>There is a distinction between birthday and birthdate: the former, except for February 29, occurs each year (e.g. January 15), while the latter is the complete date when a person was born (e.g. January 15, 2001).\u00a0\u21a9</p> </li> </ol>"},{"location":"Miscellaneous/ciphers/ciphers.html","title":"Classical Ciphers","text":"<p>The main classical cipher types are transposition ciphers, which rearrange the order of letters in a message (e.g., 'hello world' becomes 'ehlol owrdl' in a trivially simple rearrangement scheme), and substitution ciphers, which systematically replace letters or groups of letters with other letters or groups of letters (e.g., 'fly at once' becomes 'gmz bu podf' by replacing each letter with the one following it in the Latin alphabet).</p> <p>Many classical ciphers are vulnerable to frequency analysis.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#substitution-ciphers","title":"Substitution Ciphers","text":"<p>A substitution cipher changes one character into another.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#atbash","title":"Atbash","text":"<p>The alphabet is mapped to its reverse, so an \"A\" becomes a \"Z\", \"B\" turns into \"Y\", etc.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#examples","title":"Examples","text":"Plaintext Ciphertext May the Force be with you. Nzb gsv Ulixv yv drgs blf. tomorrow is another day glnliild rh zmlgsvi wzb"},{"location":"Miscellaneous/ciphers/ciphers.html#implementation","title":"Implementation","text":"<pre><code>def encrypt(msg: str) -&gt; str:\n    return \"\".join(_translate(s) if is_english_letter(s) else s for s in msg)\n\ndef decrypt(msg: str) -&gt; str:\n    return encrypt(msg)\n\ndef _translate(s: str) -&gt; str:\n    if s.isupper():\n        return chr(ord(\"A\") + ord(\"Z\") - ord(s))\n    else:\n        return chr(ord(\"a\") + ord(\"z\") - ord(s))\n</code></pre> <p>Below is a utility function that checks if a letter is an English letter.</p> <pre><code>def is_english_letter(s: str) -&gt; bool:\n    return s.isascii() and s.isalpha()\n</code></pre> <p>Notes:</p> <ul> <li>Non-Latin letters are kept as-is.</li> <li><code>_translate(s)</code> preserves the case of <code>s</code>.</li> </ul>"},{"location":"Miscellaneous/ciphers/ciphers.html#caesar","title":"Caesar","text":"<p>Each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example, with a right shift of 3, A would be replaced by D, B would become E, and so on.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#examples_1","title":"Examples","text":"Plaintext shift Ciphertext May the Force be with you. 1 Nbz uif Gpsdf cf xjui zpv. tomorrow is another day 3 wrpruurz lv dqrwkhu gdb"},{"location":"Miscellaneous/ciphers/ciphers.html#implementation_1","title":"Implementation","text":"<pre><code>def encrypt(msg: str, k: int) -&gt; str:\n    return \"\".join(right_shift(s, k) if is_english_letter(s) else s for s in msg)\n\ndef decrypt(msg: str, k: int) -&gt; str:\n    return \"\".join(right_shift(s, -k) if is_english_letter(s) else s for s in msg)\n</code></pre> <p>Below is a utility function that does the right shift. Supply <code>right_shift()</code> with <code>-k</code> to make <code>k</code> shifts to the left.</p> <pre><code>def right_shift(s: str, shift: int) -&gt; str:\n    start = \"A\" if s.isupper() else \"a\"\n    plain_code = ord(s) - ord(start)\n    cipher_code = (plain_code + shift) % 26\n    return chr(ord(start) + cipher_code)\n</code></pre>"},{"location":"Miscellaneous/ciphers/ciphers.html#cryptanalysis","title":"Cryptanalysis","text":"<p>A brute force attack can easily break Caesar cipher since there are only a limited number of possible shifts.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#affine","title":"Affine","text":"<p>A key consists of two numbers \\(m\\) and \\(b\\), where \\(m\\) is coprime to the length of the alphabet. Then to get the ciphertext for the letter with character code \\(x\\), we compute \\(mx + b\\) and reduce modulo the length of the alphabet.</p> <p>To decrypt, we just reverse the process: for each character of the ciphertext, subtract <code>b</code> and then multiply by the modular multiplicative inverse of \\(m\\) modulo the length of the alphabet.</p> <p>The Caesar cipher is an Affine cipher with \\(m = 1\\). The Atbash cipher is an Affine cipher with \\(m = b = 25\\).</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#examples_2","title":"Examples","text":"Plaintext m b Ciphertext May the Force be with you. 1 1 Nbz uif Gpsdf cf xjui zpv. tomorrow is another day 25 25 glnliild rh zmlgsvi wzb May the Force be with you. 3 4 Oey jzq Tudkq hq scjz yum. tomorrow is another day 15 6 fieibbiy wq gtifhob zgc"},{"location":"Miscellaneous/ciphers/ciphers.html#implementation_2","title":"Implementation","text":"<pre><code>from math import gcd\n\ndef encrypt(msg: str, m: int, b: int) -&gt; str:\n    if gcd(m, 26) != 1:\n        raise ValueError(f\"{m} and 26 are not relatively prime\")\n    return \"\".join(_encrypt(s, m, b) if is_english_letter(s) else s for s in msg)\n\ndef decrypt(msg: str, m: int, b: int) -&gt; str:\n    if gcd(m, 26) != 1:\n        raise ValueError(f\"{m} and 26 are not relatively prime\")\n    return \"\".join(_decrypt(s, m, b) if is_english_letter(s) else s for s in msg)\n\ndef _encrypt(s: str, m: int, b: int) -&gt; str:\n    start = \"A\" if s.isupper() else \"a\"\n    plain_code = ord(s) - ord(start)\n    cipher_code = (m * plain_code + b) % 26\n    return chr(ord(start) + cipher_code)\n\ndef _decrypt(s: str, m: int, b: int) -&gt; str:\n    start = \"A\" if s.isupper() else \"a\"\n    plain_code = ord(s) - ord(start)\n    cipher_code = ((plain_code - b) * pow(m, -1, 26)) % 26\n    return chr(ord(start) + cipher_code)\n</code></pre> <p>Note: <code>pow(m, -1, 26)</code> computes the modular multiplicative inverse of <code>m</code> modulo 26.</p> <p>The <code>gcd</code> isn't hard to implement ourselves. The function below uses Euclidean algorithm and has \\(O(\\log(\\min(a, b)))\\) time complexity.</p> <pre><code>def gcd(a: int, b: int) -&gt; int:\n    if b == 0:\n        return abs(a)\n    return gcd(b, a % b)\n</code></pre>"},{"location":"Miscellaneous/ciphers/ciphers.html#cryptanalysis_1","title":"Cryptanalysis","text":"<p>If you know a message is encrypted with an affine cipher, you only need to determine what two letters are to crack the encryption by solving a simultaneous equation.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#vigenere","title":"Vigen\u00e8re","text":"<p>In the Vigen\u00e8re Cipher, we choose a word or phrase as our encryption key. We then convert it to a sequence of numbers (using <code>a=0, b=1, ..., z=25</code>), and apply a different shift to the plaintext corresponding to the letters in the keyword. When we use up the shifts from the keyword, we repeat it again.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#examples_3","title":"Examples","text":"Plaintext key Ciphertext May the Force be with you. world Iop eka Tfcfa pv hlpv pzx. tomorrow is another day cat vofqrkqw bu agqtagr wcy"},{"location":"Miscellaneous/ciphers/ciphers.html#implementation_3","title":"Implementation","text":"<pre><code>def encrypt(msg: str, key: str) -&gt; str:\n    key_to_ints = str_to_ints(key)\n    i = 0\n    encrypted = []\n    for s in msg:\n        if is_english_letter(s):\n            encrypted.append(right_shift(s, key_to_ints[i]))\n            i = (i + 1) % len(key_to_ints)\n        else:\n            encrypted.append(s)\n    return \"\".join(encrypted)\n\n\ndef decrypt(msg: str, key: str) -&gt; str:\n    key_to_ints = str_to_ints(key)\n    i = 0\n    decrypted = []\n    for s in msg:\n        if is_english_letter(s):\n            decrypted.append(right_shift(s, -key_to_ints[i]))\n            i = (i + 1) % len(key_to_ints)\n        else:\n            decrypted.append(s)\n    return \"\".join(decrypted)\n</code></pre> <p>The encryption key is converted to a list of integers by first converting it to lower case and then ignoring non-English characters.</p> <pre><code>def str_to_ints(s: str) -&gt; list[int]:\n    return [ord(char) - ord(\"a\") for char in s.lower() if is_english_letter(char)]\n</code></pre>"},{"location":"Miscellaneous/ciphers/ciphers.html#cryptanalysis_2","title":"Cryptanalysis","text":"<p>The primary weakness of the Vigen\u00e8re cipher is the repeating nature of its key. If a cryptanalyst correctly guesses the key's length \\(n\\), the cipher text can be treated as \\(n\\) interleaved Caesar ciphers, which can easily be broken individually.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#one-time-pad","title":"One-time Pad","text":"<p>A plaintext is paired with a random secret key (also referred to as a one-time pad). The pad must not be shorter than the plaintext. Then, each character of the plaintext is combined with the corresponding character from the pad using modular addition.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#examples_4","title":"Examples","text":"Plaintext pad Ciphertext May the Force be with you. NbzuifGpsdfcfxjuizpstapq Zbx npj Ldjfj dj trnp xdm. tomorrow is another day upnpsspxjtbopuifsebz ndzdjjdt rl bbdnpjj hbx Why so serious yhphsvmvuous Uon zg nqmccok"},{"location":"Miscellaneous/ciphers/ciphers.html#implementation_4","title":"Implementation","text":"<pre><code>def encrypt(msg: str, pad: str) -&gt; str:\n    key_to_ints = str_to_ints(pad)\n    i = 0\n    encrypted = []\n    for s in msg:\n        if is_english_letter(s):\n            if i == len(key_to_ints):\n                raise ValueError(\"pad is too short\")\n            encrypted.append(right_shift(s, key_to_ints[i]))\n            i += 1\n        else:\n            encrypted.append(s)\n    return \"\".join(encrypted)\n\n\ndef decrypt(msg: str, pad: str) -&gt; str:\n    key_to_ints = str_to_ints(pad)\n    i = 0\n    decrypted = []\n    for s in msg:\n        if is_english_letter(s):\n            if i == len(key_to_ints):\n                raise ValueError(\"pad is too short\")\n            decrypted.append(right_shift(s, -key_to_ints[i]))\n            i += 1\n        else:\n            decrypted.append(s)\n    return \"\".join(decrypted)\n</code></pre>"},{"location":"Miscellaneous/ciphers/ciphers.html#cryptanalysis_3","title":"Cryptanalysis","text":"<p>The security of the system stems from the fact that any plaintext can encrypt to any ciphertext of the same length. It's critical that the random numbers are truly random and cannot be pseudorandom.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#transposition-ciphers","title":"Transposition Ciphers","text":"<p>A transposition cipher reorders the plaintext. One of the key benefits of a transposition cipher over a substitution cipher such as an affine cipher is that a transposition cipher can be applied more than once.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#columnar-transposition","title":"Columnar transposition","text":"<p>In a columnar transposition, the message is written out in rows of a fixed length, and then read out again column by column, and the columns are rearranged. Both the width of the rows and the permutation of the columns are defined by a keyword.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#examples_5","title":"Examples","text":"Plaintext key Ciphertext May the Force be with you. zephyr a  t. oe yFbhhcwotr yMeeiu tomorrow is another day AMPLE trstdrio o nroo hamwaey What we've got here is failure to communicate. DIVERT Weoea matehsu n.h't itmt  e rciwgrfeocav iloue"},{"location":"Miscellaneous/ciphers/ciphers.html#implementation_5","title":"Implementation","text":"<pre><code>def encrypt(msg: str, key: str) -&gt; str:\n    key = \"\".join(k.upper() for k in key if is_english_letter(k))\n    if len(key) &lt; 2 or len(key) &gt;= len(msg):\n        raise ValueError(f\"key length must be in [2, {len(msg)}]\")\n    rows = []\n    for s in msg:\n        if not rows or len(rows[-1]) == len(key):\n            rows.append([])\n        rows[-1].append(s)\n    columns = [[] for _ in key]\n    for i in range(len(key)):\n        for row in rows:\n            if i &lt; len(row):\n                columns[i].append(row[i])\n    return \"\".join(\"\".join(col) for _, col in sorted(zip(key, columns)))\n\ndef decrypt(msg: str, key: str) -&gt; str:\n    key = \"\".join(k.upper() for k in key if is_english_letter(k))\n    if len(key) &lt; 2 or len(key) &gt;= len(msg):\n        raise ValueError(f\"key length must be in [2, {len(msg)}]\")\n    k, r = divmod(len(msg), len(key))\n    columns = [[] for _ in range(len(key))]\n    idx = 0\n    for _, i in sorted((k, i) for i, k in enumerate(key)):\n        size = k + 1 if i &lt; r else k\n        for _ in range(size):\n            columns[i].append(msg[idx])\n            idx += 1\n    decrypted = []\n    for i in range(k + (r &gt; 0)):\n        for j in range(len(key)):\n            if i &lt; len(columns[j]):\n                decrypted.append(columns[j][i])\n    return \"\".join(decrypted)\n</code></pre>"},{"location":"Miscellaneous/ciphers/ciphers.html#cryptanalysis_4","title":"Cryptanalysis","text":"<p>For short permutations (up to 6 letters), a brute-force algorithm can test all permutations.</p> <p>Otherwise, by knowing a word of the plain text (if possible with unusual letters), it is possible to find the position of its letters and to deduce the compatible columns permutations.</p> <p>To make it stronger, a double transposition was often used. This is simply a columnar transposition applied twice. The same key can be used for both transpositions, or two different keys can be used.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#rail-fence","title":"Rail fence","text":"<p>In the rail fence cipher, the plaintext is written downwards diagonally on successive \"rails\" of an imaginary fence, then moving up when the bottom rail is reached, down again when the top rail is reached, and so on until the whole plaintext is written out. The ciphertext is then read off in rows.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#examples_6","title":"Examples","text":"Plaintext rails Ciphertext May the Force be with you. 3 MtFe hua h oc ewt o.yerbiy tomorrow is another day 4 toarorw ne mr sohdyoita What we've got here is failure to communicate. 5 Wveaoih'ehrfit ncae  e l cuatwgt sueomt. oirme"},{"location":"Miscellaneous/ciphers/ciphers.html#implementation_6","title":"Implementation","text":"<pre><code>from itertools import accumulate\n\ndef encrypt(msg: str, rails: int) -&gt; str:\n    if rails &lt; 2:\n        raise ValueError(f\"rails must be at least 2: {rails}\")\n    rows = [[] for _ in range(rails)]\n    i = 0\n    cycle = 2 * rails - 2\n    for s in msg:\n        row = cycle - i if i &gt;= rails - 1 else i\n        rows[row].append(s)\n        i = (i + 1) % cycle\n    return \"\".join(\"\".join(row) for row in rows)\n\ndef decrypt(msg: str, rails: int) -&gt; str:\n    if rails &lt; 2:\n        raise ValueError(f\"rails must be at least 2: {rails}\")\n    cycle = 2 * rails - 2\n    k, r = divmod(len(msg), cycle)\n    sizes = [k] + [2 * k] * (rails - 2) + [k]\n    for i in range(r):\n        row = cycle - i if i &gt;= rails - 1 else i\n        sizes[row] += 1\n\n    row_indices = list(accumulate(sizes, initial=0))\n    row_indices.pop()\n\n    used = [0] * rails\n    decrypted = []\n    for _ in range(k + (r &gt; 0)):\n        for i in range(cycle):\n            row = cycle - i if i &gt;= rails - 1 else i\n            char_idx = row_indices[row]\n            if used[row] &gt;= sizes[row]:\n                break\n            used[row] += 1\n            row_indices[row] += 1\n            decrypted.append(msg[char_idx])\n    return \"\".join(decrypted)\n</code></pre>"},{"location":"Miscellaneous/ciphers/ciphers.html#cryptanalysis_5","title":"Cryptanalysis","text":"<p>Rail fence can be cracked by testing each <code>rails</code> from 2 to \\(L - 1\\) where \\(L\\) is the length of the plaintext.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#route","title":"Route","text":"<p>Route transposition uses a square or rectangular grid to disarrange a text. The text is written into the grid by one route, and taken out of the grid by another route.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#diagonal-pattern","title":"Diagonal pattern","text":"<p>plaintext is placed first in a top-left to bottom-right manner:</p> <p></p> <p>The blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of plaintext. The arrow indicates the order in which the cells are filled. All empty cells are filled with <code>' '</code>.</p> <p>The number of columns is chosen such that the rightmost column will not be empty after filling in plaintext.</p> <p>ciphertext is then formed by appending all characters of the matrix in a row-wise fashion.</p> <p></p> <p>The characters in the blue cells are appended first to encodedText, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.</p> <p>Note that even if the number of rows is fixed, there may be multiple ways to encrypt a plaintext, depending on the number of columns. For example, if <code>plaintext = \"atallcost\"</code>, and <code>rows = 3</code>, then ciphertext is <code>alot tls  ac</code> if we use 4 columns whereas ciphertext is <code>alo   tls   act</code> if we use 5 columns. The examples and implementation below uses the fewest columns so that the ciphertext is as short as possible.</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#examples_7","title":"Examples","text":"Plaintext rows Ciphertext attack tonight 3 aa nh  tctit  tkog tomorrow is another day 5 trst y  oo hd   mwaea   o nr    rio What we've got here is failure to communicate. 6 Weoea mc!   h't itma    av ilout    tehsu ne      e rci     wgrfeo"},{"location":"Miscellaneous/ciphers/ciphers.html#implementation_7","title":"Implementation","text":"<pre><code>from math import ceil\nfrom typing import Iterator\n\ndef encrypt(msg: str, rows: int) -&gt; str:\n    cols = find_width(len(msg), rows)\n    matrix = [[\" \" for _ in range(cols)] for _ in range(rows)]\n    i = 0\n    for r, c in diagonal_traversal(rows, cols):\n        if i &lt; len(msg):\n            matrix[r][c] = msg[i]\n            i += 1\n        else:\n            break\n    return \"\".join(\"\".join(row) for row in matrix)\n\ndef decrypt(msg: str, rows: int) -&gt; str:\n    cols = len(msg) // rows\n    matrix = [[\" \" for _ in range(cols)] for _ in range(rows)]\n    for i, s in enumerate(msg):\n        r, c = divmod(i, cols)\n        matrix[r][c] = s\n    decrypted = []\n    for r, c in diagonal_traversal(rows, cols):\n        decrypted.append(matrix[r][c])\n    return \"\".join(decrypted).rstrip()\n\ndef find_width(size: int, rows: int) -&gt; int:\n    return max(rows, ceil((size + rows * (rows - 1) // 2) / rows))\n\ndef diagonal_traversal(rows: int, cols: int) -&gt; Iterator[tuple[int, int]]:\n    for diff in range(cols):\n        for j in range(min(rows, cols - diff)):\n            yield (j, j + diff)\n</code></pre>"},{"location":"Miscellaneous/ciphers/ciphers.html#spiral-pattern","title":"Spiral pattern","text":"<p>The examples and implementation below assumes the route to be \"spiral inwards, clockwise, starting from the top left\".</p>"},{"location":"Miscellaneous/ciphers/ciphers.html#examples_8","title":"Examples","text":"Plaintext width Ciphertext May the Force be with you. 4 May  ceto.uh eFtherbiy w o tomorrow is another day 5 tomorio yadtsrow nreh a What we've got here is failure to communicate. 6 What wgrfeoc.etam aeoe've e rcinumti t hsu oli"},{"location":"Miscellaneous/ciphers/ciphers.html#implementation_8","title":"Implementation","text":"<pre><code>from math import ceil\nfrom typing import Iterator\n\ndef encrypt(msg: str, width: int) -&gt; str:\n    rows = ceil(len(msg) / width)\n    matrix = [[\"\" for _ in range(width)] for _ in range(rows)]\n    for i, char in enumerate(msg):\n        r, c = divmod(i, width)\n        matrix[r][c] = char\n    return \"\".join(matrix[r][c] for r, c in clockwise_traversal(rows, width))\n\ndef decrypt(msg: str, width: int) -&gt; str:\n    full_rows, remainder = divmod(len(msg), width)\n    rows = full_rows + (remainder &gt; 0)\n    res = [[\"\" for _ in range(width)] for _ in range(rows)]\n    i = 0\n    for (r, c) in clockwise_traversal(rows, width):\n        if r &lt; rows - 1 or c &lt; remainder:\n            res[r][c] = msg[i]\n            i += 1\n    return \"\".join(\"\".join(row) for row in res)\n\ndef clockwise_traversal(rows: int, cols: int) -&gt; Iterator[tuple[int, int]]:\n    for k in range((min(rows, cols) + 1) // 2):\n        for j in range(k, cols - k):\n            yield (k, j)\n        for i in range(k + 1, rows - k):\n            yield (i, cols - k - 1)\n        if rows - k - 1 != k and cols - k - 1 != k:\n            for j in range(cols - k - 2, k, -1):\n                yield (rows - k - 1, j)\n            for i in range(rows - k - 1, k, -1):\n                yield (i, k)\n</code></pre>"},{"location":"Miscellaneous/ciphers/ciphers.html#cryptanalysis_6","title":"Cryptanalysis","text":"<p>Route ciphers have many more keys than a rail fence. The number of possible keys is potentially too great to be enumerated even by modern machinery for messages of reasonable length. Badly chosen routes, however, will leave excessive chunks of plaintext, or text simply reversed, and this will give cryptanalysts a clue as to the routes.</p> <p></p>"},{"location":"Miscellaneous/trees/k_ary_tree.html","title":"k-ary Trees","text":"<p>A \\(k\\)-ary tree is a rooted tree in which each node has no more than \\(k\\) children.</p> <p>A binary tree is the special case where \\(k = 2\\).</p> <p>The class below defines a <code>BinaryTreeNode</code>:</p> <pre><code>class BinaryTreeNode:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n</code></pre>"},{"location":"Miscellaneous/trees/k_ary_tree.html#types-of-k-ary-trees","title":"Types of k-ary Trees","text":""},{"location":"Miscellaneous/trees/k_ary_tree.html#balanced-k-ary-tree","title":"Balanced k-ary tree","text":"<p>A tree of height \\(h\\) is balanced if all leaves are at levels \\(h\\) or \\(h \u2212 1\\).</p> <p>The function below checks if a binary tree is balanced.</p> <pre><code>def is_balanced(root: BinaryTreeNode) -&gt; bool:\n    return _is_balanced_height(root)[0]\n\ndef _is_balanced_height(root: BinaryTreeNode) -&gt; tuple[bool, int]:\n    if root is None:\n        return True, -1\n    left_balanced, left_height = _is_balanced_height(root.left)\n    if left_balanced:\n        right_balanced, right_height = _is_balanced_height(root.right)\n        if right_balanced:\n            return (\n                abs(left_height - right_height) &lt;= 1,\n                max(left_height, right_height) + 1,\n            )\n    return False, 0\n</code></pre>"},{"location":"Miscellaneous/trees/k_ary_tree.html#full-k-ary-tree","title":"Full k-ary tree","text":"<p>A full \\(k\\)-ary tree is a \\(k\\)-ary tree where each internal node has exactly \\(k\\) children.</p> <p>Theorem: A full \\(k\\)-ary tree with \\(m\\) internal nodes has \\(km+1\\) nodes in total.</p>"},{"location":"Miscellaneous/trees/k_ary_tree.html#count-ordered-full-binary-trees","title":"Count ordered full binary trees","text":"<p>There are five ordered full binary trees with 7 nodes:</p> <p></p> <p>The functions below counts the number of ordered full binary trees with \\(n\\) nodes.</p> <pre><code>from functools import lru_cache\n\n@lru_cache(None)\ndef full_binary_trees(n: int) -&gt; int:\n    if n % 2 == 0:\n        return 0\n    if n == 1:\n        return 1\n    return sum(\n        full_binary_trees(left) * full_binary_trees(n - 1 - left)\n        for left in range(1, n, 2)\n    )\n</code></pre> <p>The results are Catalan numbers.</p>"},{"location":"Miscellaneous/trees/k_ary_tree.html#perfect-k-ary-tree","title":"Perfect k-ary tree","text":"<p>A perfect tree is a full tree in which all leaf nodes are at the same depth. </p> <p>A perfect \\(k\\)-ary tree of height \\(h\\) has</p> \\[ 1 + k + k^2 + \\cdots + k^{h} = \\frac{k^{h+1} - 1}{k-1} \\] <p>nodes.</p> <p>Therefore, a perfect binary tree has \\(2^{h+1} - 1\\) nodes. </p> <p>The following code calculates the size of a perfect binary tree.</p> <pre><code>def perfect_tree_size(root: BinaryTreeNode) -&gt; int:\n    if root is None:\n        return 0\n    h = _height(root)\n    return _perfect_tree_size(h)\n\ndef _height(root: BinaryTreeNode) -&gt; int:\n    return -1 if root is None else 1 + _height(root.left)\n\ndef _perfect_tree_size(height: int) -&gt; int:\n    return 2 ** (height + 1) - 1\n</code></pre>"},{"location":"Miscellaneous/trees/k_ary_tree.html#the-complexity-of-comparison-based-sorting-algorithms","title":"The Complexity of Comparison-based Sorting Algorithms","text":"<p>A rooted tree in which each internal vertex corresponds to a decision, with a subtree at these vertices for each possible outcome of the decision, is called a decision tree.</p> <p>We can use decision trees to model sorting algorithms and to determine an estimate for the worst-case complexity of these algorithms. Note that given n elements, there are \\(n!\\) possible orderings of these elements, because each of the n! permutations of these elements can be the correct order. A sorting algorithm based on binary comparisons can be represented by a binary decision tree in which each internal vertex represents a comparison of two elements. Each leaf represents one of the n! permutations of \\(n\\) elements.</p> <p></p> <p>The complexity of a sort based on binary comparisons is measured in terms of the number of such comparisons used. The largest number of comparisons ever needed is equal to the height of the decision tree. Because the height of a binary tree with \\(n!\\) leaves is at least \\(\\lceil \\log_2 n! \\rceil\\), at least \\(\\lceil \\log_2 n! \\rceil\\) comparison are needed.</p>"},{"location":"Miscellaneous/trees/k_ary_tree.html#complete-k-ary-tree","title":"Complete k-ary tree","text":"<p>A complete \\(k\\)-ary tree is completely filled on every level except for the last level. If the last level is not complete, then all nodes in the last level are as far left as possible.</p> <p>Notes</p> <ul> <li>A complete tree is not necessarily a full tree.</li> <li>A perfect tree is always complete.</li> <li>A complete tree is not necessarily perfect.</li> </ul> <p>Question: Which of the following binary trees are complete?</p> <p></p> <p>The function below checks if a binary tree is complete:</p> <pre><code>from collections import deque\n\ndef is_complete_tree(root: BinaryTreeNode) -&gt; bool:\n    q = deque([root])\n    while q:\n        node = q.popleft()\n        if node is None:\n            break\n        q.append(node.left)\n        q.append(node.right)\n    return not any(q)\n</code></pre> <p>The function below counts the size of a complete binary tree:</p> <pre><code>def complete_tree_size(root: BinaryTreeNode) -&gt; int:\n    if root is None:\n        return 0\n    lh = _height(root.left)\n    rh = _height(root.right)\n    if lh == rh:\n        return 1 + _perfect_tree_size(lh) + complete_tree_size(root.right)\n    else:\n        return 1 + _perfect_tree_size(rh) + complete_tree_size(root.left)\n</code></pre>"},{"location":"Miscellaneous/trees/k_ary_tree.html#space-efficiency","title":"Space Efficiency","text":"<p>Binary trees can be stored in breadth-first order as an implicit data structure in arrays, and if the tree is a complete binary tree, this method wastes no space. With a 1-indexed array, a node at index \\(i\\) has its children at \\(2i\\) and \\(2i+1\\), and its parent is at \\(\\lfloor i/2 \\rfloor\\). This method benefits from more compact storage and better locality of reference, particularly during a preorder traversal. This method of storage is often used for binary heaps.</p>"},{"location":"Miscellaneous/trees/k_ary_tree.html#example-complete-binary-tree-inserter","title":"Example: Complete Binary Tree Inserter","text":"<p>We implement a <code>CompleteBinaryTreeInserter</code> class which supports inserting new values while maintainining the complete binary tree structure.</p> <pre><code>from collections import deque\n\nclass CompleteBinaryTreeInserter:\n    def __init__(self, root: BinaryTreeNode):\n        self.nodes = [BinaryTreeNode(None)]\n        q = deque([root])\n        while q:\n            node = q.popleft()\n            self.nodes.append(node)\n            if node.left:\n                q.append(node.left)\n            if node.right:\n                q.append(node.right)\n\n    def insert(self, v: int) -&gt; None:\n        node = BinaryTreeNode(v)\n        parent = self.nodes[len(self.nodes) // 2]\n        if len(self.nodes) % 2:\n            parent.right = node\n        else:\n            parent.left = node\n        self.nodes.append(node)\n\n    def get_root(self) -&gt; BinaryTreeNode:\n        return self.nodes[1]\n</code></pre> <p></p>"},{"location":"Miscellaneous/trees/rooted_tree.html","title":"Rooted Trees","text":"<p>In a rooted tree, one of its vertices is designated as the root. The root provides the tree with an orientation from parent to child. A node with no child is called a leaf. A node that's not a leaf is called an internal node.</p> <p> An ordered tree is a rooted tree in which the children of each node are ordered. That is, if a node has children, then there is a first child, a second child, and so on.</p>"},{"location":"Miscellaneous/trees/rooted_tree.html#representations","title":"Representations","text":"<p>A rooted tree can be represented in various ways. In this section, we discuss three of them: adjacency list, array-of-parents, and first-child, next-sibling.</p> <p>The adjacency list representation of a tree \\(T\\) is an array \\(C\\) where \\(C[v]\\) is the children of \\(v\\), for all nodes in \\(T\\).</p> <p>The array-of-parents representation of a tree \\(T\\) is an array \\(P\\) where \\(P[v]\\) is the parent of \\(v\\) if \\(v\\) is not the root of T, and <code>P[v] = None</code> otherwise, for all nodes in \\(T\\).</p> <p>The first-child next-sibling representation of a tree \\(T\\) is a pair \\((F, N)\\) of arrays where:</p> <ul> <li>\\(F[v]\\) is the first child of \\(v\\) if \\(v\\) is not a leaf node, and <code>F[v] = None</code> otherwise</li> <li>\\(N[v]\\) is the next sibiling of \\(v\\) if \\(v\\) is not a last child node, <code>N[v] = None</code> otherwise</li> </ul> <p>for all nodes in \\(T\\).</p> <p>Based on the context, one or the other of the representations will be best suited. Translating between the representations can be done in linear time.</p>"},{"location":"Miscellaneous/trees/rooted_tree.html#examples","title":"Examples","text":"<p>Let's consider the following rooted tree.</p> <p></p> <p>The adjacency list representation of the above tree is</p> <code>i</code> <code>0</code> <code>1</code> <code>2</code> <code>3</code> <code>4</code> <code>5</code> <code>6</code> <code>7</code> <code>8</code> <code>9</code> <code>10</code> <code>11</code> <code>12</code> <code>13</code> <code>C[i]</code> <code>[]</code> <code>[]</code> <code>[]</code> <code>[12,5,6]</code> <code>[13]</code> <code>[4,9]</code> <code>[7,8]</code> <code>[]</code> <code>[]</code> <code>[]</code> <code>[1,2]</code> <code>[0]</code> <code>[10,11]</code> <code>[]</code> <p>The array-of-parents representation of the same tree is:</p> <code>i</code> <code>0</code> <code>1</code> <code>2</code> <code>3</code> <code>4</code> <code>5</code> <code>6</code> <code>7</code> <code>8</code> <code>9</code> <code>10</code> <code>11</code> <code>12</code> <code>13</code> <code>P[i]</code> <code>11</code> <code>10</code> <code>10</code> <code>None</code> <code>5</code> <code>3</code> <code>3</code> <code>6</code> <code>6</code> <code>5</code> <code>12</code> <code>12</code> <code>3</code> <code>4</code> <p>The first-child next-sibiling representation of the same tree is:</p> <p></p> <code>i</code> <code>0</code> <code>1</code> <code>2</code> <code>3</code> <code>4</code> <code>5</code> <code>6</code> <code>7</code> <code>8</code> <code>9</code> <code>10</code> <code>11</code> <code>12</code> <code>13</code> <code>F[i]</code> <code>None</code> <code>None</code> <code>None</code> <code>12</code> <code>13</code> <code>4</code> <code>7</code> <code>None</code> <code>None</code> <code>None</code> <code>1</code> <code>0</code> <code>10</code> <code>None</code> <code>N[i]</code> <code>None</code> <code>2</code> <code>None</code> <code>None</code> <code>9</code> <code>6</code> <code>None</code> <code>8</code> <code>None</code> <code>None</code> <code>11</code> <code>None</code> <code>5</code> <code>None</code>"},{"location":"Miscellaneous/trees/rooted_tree.html#free-tree-to-rooted-tree","title":"Free tree to rooted tree","text":"<pre><code>def build_graph(n: int, edges: list[tuple[int, int]], root: int):\n    graph: list[list[int]] = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    parents: list[Optional[int]] = [None] * n\n    children: list[list[int]] = [[] for _ in range(n)]\n    stack = [root]\n    seen = {root}\n    while stack:\n        node = stack.pop()\n        for child in graph[node]:\n            if child not in seen:\n                seen.add(child)\n                parents[child] = node\n                children[node].append(child)\n                stack.append(child)\n    return parents, children\n</code></pre> <p>Let's test it on the following tree:</p> <p></p> <pre><code>&gt;&gt;&gt; edges = [(0, 1), (0, 2), (2, 3), (2, 4), (2, 5)]\n&gt;&gt;&gt; parents, children = build_graph(6, edges, 0)\n&gt;&gt;&gt; parents\n[None, 0, 0, 2, 2, 2]\n&gt;&gt;&gt; children\n[[1, 2], [], [3, 4, 5], [], [], []]\n</code></pre>"},{"location":"Miscellaneous/trees/rooted_tree.html#translations-between-representations","title":"Translations between representations","text":""},{"location":"Miscellaneous/trees/rooted_tree.html#from-adjacency-list-to-array-of-parents","title":"From adjacency list to array-of-parents","text":"<pre><code>def adjacency_list_to_parents(children_list):\n    n = len(children_list)\n    parents = [None] * n\n    for i, children in enumerate(children_list):\n        for child in children:\n            parents[child] = i\n    return parents\n</code></pre>"},{"location":"Miscellaneous/trees/rooted_tree.html#from-array-of-parents-to-adjacency-list","title":"From array-of-parents to adjacency list","text":"<pre><code>def parents_to_adjacency_list(parents):\n    n = len(parents)\n    children_list = [[] for _ in range(n)]\n    for i, parent in enumerate(parents):\n        if parent is not None:\n            children_list[parent].append(i)\n    return children_list\n</code></pre> <p>Question: Let <code>C</code> be the adjacency list representation of a tree. Let <code>P</code> be the array-of-parents representation of the same tree.  Does <code>adjacency_list_to_parents(C) == P</code> always evaluate to <code>True</code>? What about <code>parents_to_adjacency_list(P) == C</code>?</p>"},{"location":"Miscellaneous/trees/rooted_tree.html#from-adjacency-list-to-first-child-next-sibling","title":"From adjacency list to first-child next-sibling","text":"<pre><code>def adjacency_list_to_child_sibling(children_list):\n    n = len(children_list)\n    firsts = [None] * n\n    nexts = [None] * n\n    for i, children in enumerate(children_list):\n        prev = None\n        for j, child in enumerate(children):\n            if j == 0:\n                firsts[i] = child\n            else:\n                nexts[prev] = child\n            prev = child\n    return firsts, nexts\n</code></pre>"},{"location":"Miscellaneous/trees/rooted_tree.html#from-first-child-next-sibling-to-adjacency-list","title":"From first-child next-sibling to adjacency list","text":"<pre><code>def child_sibling_to_adjacency_list(firsts, nexts):\n    n = len(firsts)\n    children_list = [[] for _ in range(n)]\n    for i, first in enumerate(firsts):\n        curr = first\n        while curr is not None:\n            children_list[i].append(curr)\n            curr = nexts[curr]\n    return children_list\n</code></pre>"},{"location":"Miscellaneous/trees/rooted_tree.html#treenode-class","title":"<code>TreeNode</code> class","text":"<p>Another popular way of representing a rooted tree is pointer-based: each node has an internal list for storing pointers to its children:</p> <pre><code>class TreeNode:\n    def __init__(self, id):\n        self._id = id\n        self._children = []\n\n    @property\n    def id(self):\n        return self._id\n\n    @property\n    def children(self):\n        return self._children\n\n    def add_child(self, node):\n        self._children.append(node)\n\n    def is_leaf(self):\n        return not self._children\n</code></pre> <p>Here's how we construct the office tree shown above:</p> <p><pre><code>def construct_the_office_tree_naive():\n    david = TreeNode(\"David\")\n    ryan = TreeNode(\"Ryan\")\n    david.add_child(ryan)\n    toby = TreeNode(\"Toby\")\n    ryan.add_child(toby)\n    michael = TreeNode(\"Michael\")\n    ryan.add_child(michael)\n    todd = TreeNode(\"Todd\")\n    michael.add_child(todd)\n    dwight = TreeNode(\"Dwight\")\n    michael.add_child(dwight)\n    jim = TreeNode(\"Jim\")\n    michael.add_child(jim)\n    pam = TreeNode(\"Pam\")\n    michael.add_child(pam)\n    meredith = TreeNode(\"Meredith\")\n    michael.add_child(meredith)\n    kelly = TreeNode(\"Kelly\")\n    michael.add_child(kelly)\n    creed = TreeNode(\"Creed\")\n    michael.add_child(creed)\n    angela = TreeNode(\"Angela\")\n    michael.add_child(angela)\n    kevin = TreeNode(\"Kevin\")\n    angela.add_child(kevin)\n    oscar = TreeNode(\"Oscar\")\n    angela.add_child(oscar)\n    andy = TreeNode(\"Andy\")\n    jim.add_child(andy)\n    phyllis = TreeNode(\"Phyllis\")\n    andy.add_child(phyllis)\n    stanley = TreeNode(\"Stanley\")\n    andy.add_child(stanley)\n    darryl = TreeNode(\"Darryl\")\n    michael.add_child(darryl)\n    jerry = TreeNode(\"Jerry\")\n    darryl.add_child(jerry)\n    madge = TreeNode(\"Madge\")\n    darryl.add_child(madge)\n    lonnie = TreeNode(\"Lonnie\")\n    darryl.add_child(lonnie)\n    return david\n</code></pre> How cumbersome! Can we construct a tree from a list of edges?</p> <pre><code>from typing import Iterable\n\ndef construct_tree_from_edges(edges: list[tuple[str, str]]) -&gt; TreeNode:\n    nodes = {}\n    for parent, child in edges:\n        if parent not in nodes:\n            nodes[parent] = TreeNode(parent)\n        if child not in nodes:\n            nodes[child] = TreeNode(child)\n        nodes[parent].add_child(nodes[child])\n    return find_root(nodes.values())\n\ndef find_root(nodes: Iterable[TreeNode]) -&gt; TreeNode:\n    is_child = set()\n    for node in nodes:\n        for child in node.children:\n            is_child.add(child.id)\n    for node in nodes:\n        if node.id not in is_child:\n            return node\n    raise ValueError(\"input is not a valid tree\")\n</code></pre> <p>Let's see it in action:</p> <pre><code>&gt;&gt;&gt; edges = [\n...     (\"Ryan\", \"Toby\"),\n...     (\"Ryan\", \"Michael\"),\n...     (\"Michael\", \"Todd\"),\n...     (\"Michael\", \"Dwight\"),\n...     (\"Michael\", \"Jim\"),\n...     (\"Michael\", \"Pam\"),\n...     (\"Michael\", \"Meredith\"),\n...     (\"Michael\", \"Kelly\"),\n...     (\"Michael\", \"Creed\"),\n...     (\"Michael\", \"Angela\"),\n...     (\"Michael\", \"Darryl\"),\n...     (\"Jim\", \"Andy\"),\n...     (\"Andy\", \"Phyllis\"),\n...     (\"Andy\", \"Stanley\"),\n...     (\"Angela\", \"Kevin\"),\n...     (\"Angela\", \"Oscar\"),\n...     (\"Darryl\", \"Jerry\"),\n...     (\"Darryl\", \"Madge\"),\n...     (\"Darryl\", \"Lonnie\"),\n...     (\"David\", \"Ryan\"),\n... ]\n&gt;&gt;&gt; construct_tree_from_edges(edges).id == \"David\"\nTrue\n</code></pre> <p>The <code>find_root</code> function makes use of the fact that the root node is the only node in a tree that's not a child of anyone else. The implementation above has linear time and space complexity. Can we reduce the space complexity?</p> <p>Observe that as we traverse the list of nodes, if we put each node and its children into a list, then every node will appear twice, except for the root node which only appears once. Then the unique node can be found using the XOR operator:</p> <pre><code>from string import ascii_letters\n\ndef find_root(nodes: Iterable[TreeNode]) -&gt; TreeNode:\n    current = 0\n    for node in nodes:\n        current ^= _str_to_int(node.id)\n        for child in node.children:\n            current ^= _str_to_int(child.id)\n    for node in nodes:\n        if _str_to_int(node.id) == current:\n            return node\n\ndef _str_to_int(s: str) -&gt; int:\n    return sum((ascii_letters.index(char) + 1) * pow(52, i) for i, char in enumerate(s))\n</code></pre> <p>Notes:</p> <ul> <li>This code fragment assumes <code>node.id</code> only contains <code>a-zA-Z</code>.</li> <li><code>string.ascii_letters</code> is a string of length 52: <code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code></li> <li><code>_str_to_int</code> encodes a string to an integer by base conversion. What happens if one leaves out the <code>+ 1</code> in <code>ascii_letters.index(char) + 1)</code>?</li> </ul>"},{"location":"Miscellaneous/trees/rooted_tree.html#terminology","title":"Terminology","text":"<p>size: The number of vertices in the tree.</p> <p>The size can be found using a simple recursion:</p> <pre><code>def get_size(root: TreeNode) -&gt; int:\n    return 1 + sum(get_size(child) for child in root.children)\n</code></pre> <p>Iterative DFS:</p> <pre><code>def get_size_stack(root: TreeNode) -&gt; int:\n    if root is None:\n        return 0\n    stack = [root]\n    size = 0\n    while stack:\n        node = stack.pop()\n        size += 1\n        for child in node.children:\n            stack.append(child)\n    return size\n</code></pre> <p>depth: The number of edges from a given node to the root.</p> <p>To find the depth of a node, we need to traverse the tree level by level, so BFS is used.</p> <pre><code>from collections import deque\n\ndef get_depth(root: TreeNode, node: TreeNode) -&gt; int:\n    depth = 0\n    q = deque([root])\n    while q:\n        for _ in range(len(q)):\n            v = q.popleft()\n            if v == node:\n                return depth\n            for child in v.children:\n                q.append(child)\n        depth += 1\n    raise ValueError(\"node does not exist in root\")\n</code></pre> <p>height: The number of edges on the longest path from a given node to a leaf. The height of a tree is the height of its root. Equivalently, the height of a tree is the depth of its deepest leaf. So we can again use BFS.</p> <pre><code>from collections import deque\n\ndef get_height(root: TreeNode) -&gt; int:\n    depth = 0\n    q = deque([root])\n    while q:\n        for _ in range(len(q)):\n            v = q.popleft()\n            for child in v.children:\n                q.append(child)\n        depth += 1\n    return depth - 1\n</code></pre> <p>The height of a node \\(u\\) can also be defined recursively:</p> <ul> <li>if \\(u\\) is a leaf, then its height is 0.</li> <li>otherwise, its height is one more than the maximum of the heights of its children.</li> </ul> <pre><code>def get_height_recursive(root: TreeNode) -&gt; int:\n    return max((get_height_recursive(child) for child in root.children), default=-1) + 1\n</code></pre> <p>This is a post-order traversal, which is one type of DFS.</p> <p>siblings: Two nodes that are children of the same parent</p> <pre><code>from collections import deque\n\ndef check_sibling(root: TreeNode, node1: TreeNode, node2: TreeNode) -&gt; bool:\n    q = deque([root])\n    while q:\n        v = q.popleft()\n        if v in (node1, node2):\n            return False\n        if node1 in v.children and node2 in v.children:\n            return True\n        for child in v.children:\n            q.append(child)\n    return False\n</code></pre> <p>ancestor: \\(u\\) is an ancestor of \\(v\\) if \\(u = v\\) or \\(u\\) is an ancestor of the parent of \\(v\\).</p> <p>proper ancestor: A proper ancestor node of \\(v\\) is an ancestor node of \\(v\\) that is not \\(v\\) itself.</p> <p>descendant: \\(u\\) is a descendant of \\(v\\) if \\(v\\) is an ancestor of \\(u\\).</p> <p>proper descendant: A proper descendant node of \\(v\\) is a descendant node of \\(v\\) that is not \\(v\\) itself.</p> <p>The following code performs an iterative pre-order traversal to search for <code>des</code> in the subtree rooted at <code>anc</code>:</p> <pre><code>def check_ancestor_iterative(anc: TreeNode, des: TreeNode) -&gt; bool:\n    stack = [anc]\n    while stack:\n        node = stack.pop()\n        if node == des:\n            return True\n        for child in node.children:\n            stack.append(child)\n    return False\n</code></pre> <p>The code below uses recursion:</p> <pre><code>def check_ancestor(anc: TreeNode, des: TreeNode) -&gt; bool:\n    if anc is None:\n        return False\n    return anc == des or any(check_ancestor(child, des) for child in anc.children)\n</code></pre> <p>Of course, BFS can also be used here. Which traversal is better here, BFS or DFS? Both have linear time complexity, but there is a  difference in terms of space complexity. BFS uses <code>O(maxWidth)</code> memory, whereas DFS uses <code>O(height)</code>. If the tree is faily full, then <code>O(height) = O(log N)</code> where \\(N\\) is the size of the tree, and DFS is more space-efficient than BFS.</p> <p>Lowest Common Ancestor (LCA): The LCA between two nodes \\(u\\) and \\(v\\) is the lowest node in the tree that has both \\(u\\) and \\(v\\) as descendants.</p> <p>In the office tree above, Michael is the LCA between Jim and Oscar, Ryan is the LCA between Tobby and Dwight, and Andy is the LCA between Stanley and Andy.</p> <pre><code>def get_lca(root: TreeNode, u: TreeNode, v: TreeNode) -&gt; TreeNode:\n    parents = {root.id: None}\n\n    stack = [root]\n    while stack:\n        node = stack.pop()\n        for child in node.children:\n            parents[child.id] = node\n            stack.append(child)\n\n    u_ancestors = set()\n    u_anc = u\n    while u_anc is not None:\n        u_ancestors.add(u_anc.id)\n        u_anc = parents[u_anc.id]\n\n    v_anc = v\n    while v_anc.id not in u_ancestors:\n        v_anc = parents[v_anc.id]\n\n    return v_anc\n</code></pre>"},{"location":"Miscellaneous/trees/rooted_tree.html#check-two-trees-are-identical","title":"Check Two Trees Are Identical","text":""},{"location":"Miscellaneous/trees/rooted_tree.html#ordered-trees","title":"Ordered Trees","text":"<p>Checking whether two ordered trees are identical can be done recursively:</p> <pre><code>def same_ordered_tree(tree1, tree2):\n    return (tree1 is None and tree2 is None) or (\n        tree1 is not None\n        and tree2 is not None\n        and tree1.id == tree2.id\n        and len(tree1.children) == len(tree2.children)\n        and all(\n            same_ordered_tree(c1, c2) for c1, c2 in zip(tree1.children, tree2.children)\n        )\n    )\n</code></pre>"},{"location":"Miscellaneous/trees/rooted_tree.html#unordered-trees","title":"Unordered Trees","text":"<p>When the trees are unordered, equalities are checked after sorting children by <code>id</code>. Here we assume the <code>id</code>'s are unique.</p> <pre><code>from operator import attrgetter\n\ndef same_unordered_tree(tree1, tree2):\n    return (tree1 is None and tree2 is None) or (\n        tree1 is not None\n        and tree2 is not None\n        and tree1.id == tree2.id\n        and len(tree1.children) == len(tree2.children)\n        and all(\n            same_unordered_tree(c1, c2)\n            for c1, c2 in zip(\n                sorted(tree1.children, key=attrgetter(\"id\")),\n                sorted(tree2.children, key=attrgetter(\"id\")),\n            )\n        )\n    )\n</code></pre> <p>Question: What if the <code>id</code>'s are not unique?</p>"},{"location":"Miscellaneous/trees/rooted_tree.html#serialization","title":"Serialization","text":"<p>In this section we discuss how to serialize and deserialize a rooted tree.</p>"},{"location":"Miscellaneous/trees/rooted_tree.html#dfs-nested-parenthesis-representation","title":"DFS: Nested Parenthesis Representation","text":"<pre><code>def serialize_dfs(root) -&gt; str:\n    return (\n        \"(\"\n        + str(root.id)\n        + \"\".join(serialize_dfs(child) for child in root.children)\n        + \")\"\n    )\n</code></pre>"},{"location":"Miscellaneous/trees/rooted_tree.html#application-i-check-two-unordered-trees-have-the-same-structure","title":"Application I: Check Two Unordered Trees Have the Same Structure","text":"<p>The following three unordered trees have the same structure:</p> <p> </p> <p>Aho, Hopcroft and Ullman (AHU) algorithm:</p> <pre><code>def normalize(root: TreeNode) -&gt; str:\n    children_nums = [normalize(child) for child in root.children]\n    children_nums.sort()\n    return \"(\" + \"\".join(children_nums) + \")\"\n</code></pre> <p>The three trees above are normalized to <code>((())()())</code>.</p>"},{"location":"Miscellaneous/trees/rooted_tree.html#application-ii-check-subtree","title":"Application II: Check subtree","text":"<p>A subtree of a tree \\(T\\) is a tree that consists of a node in \\(T\\) and all of this node's descendants. A tree is considered a subtree of itself.</p> <pre><code>def is_subtree(tree: TreeNode, subtree: TreeNode) -&gt; bool:\n    tree_serialized = serialize(tree)\n    subtree_serialized = serialize(subtree)\n    return subtree_serialized in tree_serialized\n</code></pre>"},{"location":"Miscellaneous/trees/rooted_tree.html#level-order-traversal","title":"Level-order Traversal","text":"<p>Each group of children is separated by a <code>#</code>.</p> <p>For example, serializing the office tree renders</p> <p><code>David,#,Ryan,#,Toby,Michael,#,#,Todd,Dwight,Jim,Pam,Meredith,Kelly,Creed,Angela,Darryl,#,#,#,Andy,#,#,#,#,#,Kevin,Oscar,#,Jerry,Madge,Lonnie,#,Phyllis,Stanley</code>.</p> <pre><code>from collections import deque\n\ndef serialize(root: TreeNode) -&gt; str:\n    res = []\n    q = deque([root, None])\n    while q:\n        for _ in range(len(q)):\n            node = q.popleft()\n            if node is not None:\n                res.append(node.id)\n                for child in node.children:\n                    q.append(child)\n                q.append(None)\n            else:\n                res.append(\"#\")\n    while res and res[-1] == \"#\":\n        res.pop()\n    return \",\".join(res)\n\ndef deserialize(data: str) -&gt; TreeNode:\n    if not data:\n        return None\n    q = deque()\n    root = None\n    for s in data.split(\",\"):\n        if s == \"#\":\n            if len(q) &gt; 1:\n                q.popleft()\n        else:\n            node = TreeNode(s)\n            if root is None:\n                root = node\n            if q:\n                q[0].children.append(node)\n            q.append(node)\n    return root\n</code></pre> <p></p>"},{"location":"Miscellaneous/trees/trees_and_forests.html","title":"Trees and Forests","text":"<p>A forest is an acyclic graph. Any two vertices in a forest are connected by at most one path.</p> <p>A tree is a connected forest. In other words, all of a forest's components are trees. Any two vertices in a tree are connected by exactly one path.</p> <p>A forest with \\(n\\) vertices and \\(e\\) edges has \\(n-e\\) components. A tree with \\(n\\) nodes has \\(n-1\\) edges. Removing any edge from a tree divides it into two components, and adding any edge creates a cycle.</p> <p>The leaves of a tree are the nodes with only one neighbor.</p> <p>Question: Which of the following graphs are trees?</p> <p></p>"},{"location":"Miscellaneous/trees/trees_and_forests.html#verify-a-graph-is-a-forest","title":"Verify a graph is a forest","text":"<p>Given an undirected graph, how do we know if the graph is a forest?</p> <p>Using DFS, the following function returns <code>True</code> if the input is acyclic.</p> <pre><code>def is_forest(n: int, edges: list[list[int]]) -&gt; bool:\n    def has_cycle(root, parent):\n        if seen[root]:\n            return False\n        seen[root] = True\n        return any(\n            (seen[nei] and nei != parent) or (not seen[nei] and has_cycle(nei, root))\n            for nei in graph[root]\n        )\n    seen = [False] * n\n    graph = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    return not any(has_cycle(i, -1) for i in range(n))\n</code></pre>"},{"location":"Miscellaneous/trees/trees_and_forests.html#verify-a-graph-is-a-tree","title":"Verify a graph is a tree","text":"<p>Given an undirected graph, how do we know if the graph is a tree?</p> <p>A graph is a tree as long as it satisfies two out of the following three conditions:</p> <ol> <li>the graph contains \\(n - 1\\) edges</li> <li>the graph does not contain cycles</li> <li>the graph is connected</li> </ol> <p>Condition 1 is straightforward to check, as long as we assume that <code>edges</code> are distinct.</p> <p>The following function checks for conditions 1 and 2.</p> <pre><code>def is_tree_check_acyclic(n: int, edges: list[list[int]]) -&gt; bool:\n    return len(edges) == n - 1 and is_forest(n, edges)\n</code></pre> <p>The following functions checks for conditions 1 and 3.</p> <pre><code>def is_tree_check_connected(n: int, edges: list[list[int]]) -&gt; bool:\n    return len(edges) == n - 1 and _count_components(n, edges) == 1\n\ndef _count_components(n: int, edges: list[list[int]]) -&gt; int:\n    def visit(root):\n        if not seen[root]:\n            seen[root] = True\n            for nei in graph[root]:\n                visit(nei)\n    seen = [False] * n\n    graph = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    components = 0\n    for v in range(n):\n        if not seen[v]:\n            visit(v)\n            components += 1\n    return components\n</code></pre>"},{"location":"Miscellaneous/trees/trees_and_forests.html#cayleys-formula","title":"Cayley's Formula","text":"<p>Cayley's formula states that there are \\(n^{n-2}\\) labeled trees on \\(n\\) nodes. The nodes are labeled \\(1, 2, \\dots, n\\), and two trees are different if either their structures or labelings are different.</p> <p>For example, when \\(n=4\\), the number of labeled trees is \\(4^{4-2} = 16\\):</p> <p></p> <p>Next we will see how Cayley\u2019s formula can be derived using Pr\u00fcfer codes.</p>"},{"location":"Miscellaneous/trees/trees_and_forests.html#prufer-code","title":"Pr\u00fcfer code","text":"<p>A Pr\u00fcfer code is a sequence of \\(n \u2212 2\\) numbers that describes a labeled tree on \\(n\\) nodes, and can be generated by a simple iterative algorithm.</p>"},{"location":"Miscellaneous/trees/trees_and_forests.html#convert-a-tree-into-a-prufer-code","title":"Convert a tree into a Pr\u00fcfer code","text":"<p>Consider a labeled tree \\(T\\) with vertices \\(\\{1, 2, ..., n\\}\\). At step \\(i\\), remove the leaf with the smallest label and set the \\(i\\)th element of the Pr\u00fcfer sequence to be the label of this leaf's neighbor.</p> <p>For example, the Pr\u00fcfer code of the tree below is \\([4, 4, 2]\\), because we remove leaves \\(1\\), \\(3\\), and \\(4\\).</p> <p></p> <pre><code>from heapq import heapify, heappop, heappush\n\ndef prufer_code(edges: list[tuple[int, int]]) -&gt; list[int]:\n    n = len(edges) + 1\n    graph: list[set[int]] = [set() for _ in range(n + 1)]\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    pc = []\n    leaves = [vertex for vertex in range(1, n + 1) if len(graph[vertex]) == 1]\n    heapify(leaves)\n    for _ in range(n - 2):\n        leaf = heappop(leaves)\n        neighbor = graph[leaf].pop()\n        pc.append(neighbor)\n        graph[neighbor].remove(leaf)\n        if len(graph[neighbor]) == 1:\n            heappush(leaves, neighbor)\n    return pc\n</code></pre> <p>Let's see it in action:</p> <pre><code>&gt;&gt;&gt; tree = [(1, 4), (2, 5), (2, 4), (3, 4)]\n&gt;&gt;&gt; prufer_code(tree)\n[4, 4, 2]\n</code></pre> <p>The above implementation runs in \\(O(n \\log n)\\) time.</p> <p>Observe that each vertex appears in the Pr\u00fcfer code a fixed number of times - its degree minus \\(1\\), since the degree will get smaller every time we record its label in the code, and we remove it once the degree is \\(1\\).</p>"},{"location":"Miscellaneous/trees/trees_and_forests.html#convert-a-prufer-code-into-a-tree","title":"Convert a Pr\u00fcfer code into a tree","text":"<p>Let \\({a[0], a[1], ..., a[k-1]}\\) be a Pr\u00fcfer sequence of length \\(k\\). The tree will have nodes labeled from \\(1\\) to \\(k+2\\). For each node set its degree to the number of times it appears in the sequence plus \\(1\\). Next, for each number in the sequence \\(a[i]\\), find the first (lowest-numbered) node, \\(j\\), with degree equal to \\(1\\), add the edge \\((j, a[i])\\) to the tree, and decrement the degrees of \\(j\\) and \\(a[i]\\). At the end of this loop two nodes with degree \\(1\\) will remain (call them \\(u\\) and \\(v\\)). Lastly, add the edge \\((u,v)\\) to the tree.</p> <pre><code>def to_tree(pc: list[int]) -&gt; list[tuple[int, int]]:\n    n = len(pc) + 2\n    edges = []\n    degrees = [1] * (n + 1)\n    for v in pc:\n        degrees[v] += 1\n    leaves = [v for v in range(1, n + 1) if degrees[v] == 1]\n    for v in pc:\n        i = heappop(leaves)\n        edges.append((v, i))\n        degrees[v] -= 1\n        if degrees[v] == 1:\n            heappush(leaves, v)\n    edges.append((heappop(leaves), heappop(leaves)))\n    return edges\n</code></pre>"},{"location":"Miscellaneous/trees/trees_and_forests.html#relation-to-cayleys-formula","title":"Relation to Cayley's Formula","text":"<p>The immediate consequence is that Pr\u00fcfer sequences provide a bijection between the set of labeled trees on \\(n\\) vertices and the set of sequences of length \\(n \u2212 2\\) on the labels \\(1\\) to \\(n\\). The latter set has size \\(n^{n\u22122}\\), so the existence of this bijection proves Cayley's formula.</p>"},{"location":"Miscellaneous/trees/trees_and_forests.html#distance-measures","title":"Distance Measures","text":"<p>eccentricity: The eccentricity of a vertex \\(v\\) is the maximum distance between \\(v\\) and any other vertex in the tree.</p> <p></p> <p>The following function uses DFS to find the eccentricity of a <code>vertex</code> in a <code>graph</code> represented as an adjacency list.</p> <pre><code>def eccentricity_dfs(graph: list[list[int]], vertex: int) -&gt; int:\n    def dfs(root, parent):\n        return 1 + max(\n            (dfs(neighbor, root) for neighbor in graph[root] if neighbor != parent),\n            default=-1,\n        )\n\n    return dfs(vertex, -1)\n</code></pre> <p>Below is the BFS version:</p> <pre><code>from collections import deque\n\ndef eccentricity_bfs(graph: list[list[int]], vertex: int) -&gt; int:\n    seen = [False] * len(graph)\n    seen[vertex] = True\n    dist = 0\n    q = deque([vertex])\n    while q:\n        for _ in range(len(q)):\n            node = q.popleft()\n            for child in graph[node]:\n                if not seen[child]:\n                    seen[child] = True\n                    q.append(child)\n        dist += 1\n    return dist - 1\n</code></pre> <p>Let's see it in action:</p> <pre><code>graph = [[1], [0, 2, 3, 5], [1], [1, 4], [3], [1, 6], [5]]\nassert eccentricity_bfs(graph, 0) == eccentricity_dfs(graph, 0) == 3\nassert eccentricity_bfs(graph, 1) == eccentricity_dfs(graph, 1) == 2\nassert eccentricity_bfs(graph, 2) == eccentricity_dfs(graph, 2) == 3\nassert eccentricity_bfs(graph, 3) == eccentricity_dfs(graph, 3) == 3\nassert eccentricity_bfs(graph, 4) == eccentricity_dfs(graph, 4) == 4\nassert eccentricity_bfs(graph, 5) == eccentricity_dfs(graph, 5) == 3\nassert eccentricity_bfs(graph, 6) == eccentricity_dfs(graph, 6) == 4\n</code></pre> <p>Let's also augment <code>eccentricity_bfs</code> to also include the node that's furthest away from the input:</p> <pre><code>from collections import deque\n\ndef eccentricity(graph: list[list[int]], vertex: int) -&gt; tuple[int, int]:\n    node = vertex\n    q = deque([node])\n    seen = [False] * len(graph)\n    seen[node] = True\n    dist = 0\n    while q:\n        for _ in range(len(q)):\n            node = q.popleft()\n            for child in graph[node]:\n                if not seen[child]:\n                    seen[child] = True\n                    q.append(child)\n        dist += 1\n    return node, dist - 1\n</code></pre> <p>diameter: The maximum eccentricity of any vertex in the tree.</p> <p>peripheral vertex: A vertex of maximum eccentricity.</p> <p>periphery: The set of peripheral vertices.</p> <p>To find the diameter of a tree, we first find the farthest node from an arbitrary node <code>a</code>, and name this node <code>b</code>. Then the diameter of the tree is the eccentricity of <code>b</code>.</p> <pre><code>def get_diameter(tree: list[list[int]]) -&gt; int:\n    peripheral_node, _ = eccentricity(tree, 0)\n    _, diameter = eccentricity(tree, peripheral_node)\n    return diameter\n</code></pre> <p>radius: The minimum eccentricity of any vertex in the tree.</p> <p>A tree's radius \\(r\\) is related to its diameter \\(d\\): \\(r = \\lceil d / 2 \\rceil\\).</p> <p>central node: A vertex of minimum eccentricity.</p> <p>center: The set of central nodes.</p> <p>Theorem: A tree can have either one or two central nodes. In the case of two central nodes, the two central nodes are adjacent.</p> <p>centered tree: A tree with only one center.</p> <p>bicentered tree: A tree with two centers.</p> <pre><code>def find_center(n: int, edges: list[tuple[int, int]]) -&gt; list[int]:\n    if n &lt;= 2:\n        return list(range(n))\n\n    graph: list[set[int]] = [set() for _ in range(n)]\n    for a, b in edges:\n        graph[a].add(b)\n        graph[b].add(a)\n    leaves = [v for v, neighbors in enumerate(graph) if len(neighbors) == 1]\n    nodes_remaining = n\n    while nodes_remaining &gt; 2:\n        new_leaves = []\n        for leaf in leaves:\n            nodes_remaining -= 1\n            neighbor = graph[leaf].pop()\n            graph[neighbor].remove(leaf)\n            if len(graph[neighbor]) == 1:\n                new_leaves.append(neighbor)\n        leaves = new_leaves\n    return leaves\n</code></pre> <p></p>"},{"location":"Python101/Control_Flow.html","title":"Control Flow","text":""},{"location":"Python101/Control_Flow.html#conditionals","title":"Conditionals","text":""},{"location":"Python101/Control_Flow.html#if-else","title":"<code>if-else</code>","text":"<pre><code>temperature = 30\nif temperature &gt; 25:\n    print(\"It's hot!\")\n</code></pre>"},{"location":"Python101/Control_Flow.html#if-elif-else","title":"<code>if-elif-else</code>","text":"<pre><code>if temperature &gt; 25:\n    print(\"It's hot!\")\nelif temperature &gt; 15:\n    print(\"It's warm.\")\nelse:\n    print(\"It's cold.\")\n</code></pre>"},{"location":"Python101/Control_Flow.html#ternary-operator","title":"Ternary Operator","text":"<pre><code>status = \"Adult\" if age &gt;= 18 else \"Minor\"\n</code></pre>"},{"location":"Python101/Control_Flow.html#loops","title":"Loops","text":""},{"location":"Python101/Control_Flow.html#for-loop","title":"<code>for</code>-loop","text":"<p>The <code>for</code> loop is used to iterate over a sequence:</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n# Output:\n# apple\n# banana\n# cherry\n</code></pre>"},{"location":"Python101/Control_Flow.html#enumerate","title":"<code>enumerate</code>","text":"<p>The <code>enumerate()</code> function gives both the index and the corresponding element:</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfor index, fruit in enumerate(fruits):\n    print(f\"{index}: {fruit}\")\n# Output:\n# 0: apple\n# 1: banana\n# 2: cherry\n</code></pre>"},{"location":"Python101/Control_Flow.html#range","title":"<code>range</code>","text":"<p>The <code>range()</code> function generates a sequence of numbers:</p> <pre><code>range(start, stop, step)\n</code></pre> <ul> <li><code>start</code>: Starting value (default is <code>0</code>).</li> <li><code>stop</code>: End of the sequence (exclusive).</li> <li><code>step</code>: Increment or decrement (default is <code>1</code>).</li> </ul>"},{"location":"Python101/Control_Flow.html#basic-range","title":"Basic Range","text":"<pre><code>for i in range(5):\n    print(i)\n# Output: 0, 1, 2, 3, 4\n</code></pre>"},{"location":"Python101/Control_Flow.html#custom-start-and-stop","title":"Custom Start and Stop","text":"<pre><code>for i in range(2, 6):\n    print(i)\n# Output: 2, 3, 4, 5\n</code></pre>"},{"location":"Python101/Control_Flow.html#step-values","title":"Step Values","text":"<pre><code>for i in range(0, 10, 2):\n    print(i)\n# Output: 0, 2, 4, 6, 8\n</code></pre>"},{"location":"Python101/Control_Flow.html#reverse-range","title":"Reverse Range","text":"<pre><code>for i in range(10, 0, -2):\n    print(i)\n# Output: 10, 8, 6, 4, 2\n</code></pre>"},{"location":"Python101/Control_Flow.html#exception-handling","title":"Exception Handling","text":""},{"location":"Python101/Control_Flow.html#basic-exception-handling","title":"Basic Exception Handling","text":"<p><code>try</code> blocks allow you to test a block of code for errors, while the <code>except</code> block lets you handle the error gracefully without stopping the program.</p> <pre><code>try:\n    x = 1 / 0\nexcept ZeroDivisionError:\n    print(\"Can't divide by zero!\")\n</code></pre>"},{"location":"Python101/Control_Flow.html#multiple-exception-types","title":"Multiple Exception Types","text":"<p>You can catch multiple exceptions to handle different error types distinctly:</p> <pre><code>try:\n  # Code that might raise different exceptions\nexcept ValueError:\n  print(\"Value error occurred.\")\nexcept ZeroDivisionError:\n  print(\"Division by zero.\")\n</code></pre>"},{"location":"Python101/Control_Flow.html#finally-block","title":"<code>finally</code> Block","text":"<p><code>finally</code> ensures that a block of code is executed, regardless of an exception being thrown or not. It's often used for cleaning up resources.</p> <pre><code>try:\n  # Risky code\nexcept Exception as e:\n  print(f\"An error occurred: {e}\")\nfinally:\n  print(\"This block executes no matter what.\")\n</code></pre> <p></p>"},{"location":"Python101/Managing_Imports.html","title":"Managing Imports","text":"<p>Python modules are reusable pieces of code that allow you to logically organize your programs. Modules can define functions, classes, and variables, or include runnable code. Using the <code>import</code> statement, you can include these modules in your scripts, accessing their functionality without rewriting code.</p>"},{"location":"Python101/Managing_Imports.html#syntax","title":"Syntax","text":"<p>To import a module, use the <code>import</code> statement. Here are a few examples:</p> <pre><code>import math  # Imports the entire math module\nfrom collections import Counter  # Imports only the Counter class from the collections module\nimport numpy as np  # Imports the numpy module and gives it an alias as np\n</code></pre>"},{"location":"Python101/Managing_Imports.html#examples","title":"Examples","text":""},{"location":"Python101/Managing_Imports.html#example-1-using-the-os-module","title":"Example 1: Using the <code>os</code> Module","text":"<p>The <code>os</code> module provides functions for interacting with the operating system, such as managing files and directories.</p> <pre><code>import os\n\n# Get the current working directory\ncurrent_directory = os.getcwd()\nprint(f\"Current Directory: {current_directory}\")\n\n# List files and directories in the current directory\nentries = os.listdir(current_directory)\nprint(f\"Contents of Directory: {entries}\")\n\n# Create a new directory\nos.mkdir('example_dir')\nprint(\"Created a new directory named 'example_dir'\")\n</code></pre>"},{"location":"Python101/Managing_Imports.html#example-2-using-the-math-module","title":"Example 2: Using the <code>math</code> Module","text":"<p>The <code>math</code> module provides access to mathematical constants and functions.</p> <pre><code>import math\n\n# Calculate the square root of a number\nnumber = 16\nsqrt_number = math.sqrt(number)\nprint(f\"The square root of {number} is {sqrt_number}\")\n\n# Calculate the value of pi\nprint(f\"The value of pi is {math.pi}\")\n\n# Calculate the sine of an angle (in radians)\nangle = math.radians(30)  # Convert degrees to radians\nsine_value = math.sin(angle)\nprint(f\"The sine of 30 degrees is {sine_value}\")\n</code></pre>"},{"location":"Python101/Managing_Imports.html#importing-specific-functions-or-classes","title":"Importing Specific Functions or Classes","text":"<p>To avoid prefixing module names every time, import specific components directly:</p> <pre><code>from math import sqrt, pi\n\n# Using imported functions directly\nprint(f\"The square root of 25 is {sqrt(25)}\")\nprint(f\"The value of pi is approximately {pi}\")\n</code></pre>"},{"location":"Python101/Managing_Imports.html#aliasing-modules","title":"Aliasing Modules","text":"<p>For long module names or commonly used libraries, aliasing makes code more concise and readable.</p> <pre><code>import numpy as np\n\n# Create an array using numpy\narray = np.array([1, 2, 3, 4, 5])\nprint(f\"Numpy Array: {array}\")\n</code></pre>"},{"location":"Python101/Managing_Imports.html#best-practices","title":"Best Practices","text":"<ol> <li>Organize imports at the top of the file: All imports should be placed at the beginning of the script for clarity and maintainability.</li> <li>Avoid wildcard imports: Instead of <code>from module import *</code>, import only the components you need for clarity and to avoid conflicts.</li> <li>Use aliases for readability: For example, <code>import numpy as np</code>.</li> <li>Group imports logically:<ul> <li>Standard library imports (e.g., <code>math</code>, <code>os</code>).</li> <li>Third-party library imports (e.g., <code>numpy</code>, <code>pandas</code>).</li> <li>Custom module imports.</li> </ul> </li> </ol>"},{"location":"Python101/Object_Oriented_Programming.html","title":"Object-Oriented Programming","text":""},{"location":"Python101/Object_Oriented_Programming.html#introduction","title":"Introduction","text":"<p>Object-Oriented Programming (OOP) is a paradigm that emphasizes organizing software design around data, or objects, instead of functions and logic. This approach allows for more natural modeling of real-world scenarios within the programming context.</p>"},{"location":"Python101/Object_Oriented_Programming.html#defining-classes-and-objects","title":"Defining Classes and Objects","text":"<p>A class serves as a blueprint for objects, encapsulating attributes (data) and methods (functions) that operate on that data. Consider the <code>Cat</code> class as an example:</p> <pre><code>class Cat:\n    species = \"Felis catus\"  # Class attribute\n\n    def __init__(self, name, age):\n        self.name = name  # Instance attribute\n        self.age = age\n\n    def description(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    def speak(self, sound):\n        return f\"{self.name} says {sound}\"\n</code></pre> <p>Instantiation and interaction with a Cat object:</p> <pre><code>my_cat = Cat(\"Cookie\", 8)\nprint(my_cat.description())  # Output: Cookie is 8 years old\nprint(my_cat.speak(\"meow\"))  # Output: Cookie says meow\n</code></pre>"},{"location":"Python101/Object_Oriented_Programming.html#inheritance-enhancing-reusability-and-hierarchy","title":"Inheritance: Enhancing Reusability and Hierarchy","text":"<p>Inheritance is a fundamental principle of object-oriented programming that enables a class to derive or inherit attributes and behaviors (methods) from another class. This mechanism promotes code reusability and establishes a natural hierarchy among classes.</p> <p>In the following example, the <code>Persian</code> class inherits from the <code>Cat</code> class. This means that a <code>Persian</code> cat is a specialized form of <code>Cat</code> that retains general <code>Cat</code> behaviors while also defining behaviors specific to Persian cats.</p> <pre><code>class Persian(Cat):\n    def speak(self, sound=\"purr\"):\n        return super().speak(sound)\n</code></pre> <p>In this code:</p> <ul> <li>The <code>Persian</code> class extends <code>Cat</code>, meaning it inherits <code>Cat</code>'s attributes and methods.</li> <li>The <code>speak</code> method in the <code>Persian</code> class overrides the same method in the <code>Cat</code> class, providing a specific behavior for Persian cats. The <code>super()</code> function is used to call the parent class's method, allowing the <code>Persian</code> class to extend or modify its behavior.</li> </ul>"},{"location":"Python101/Object_Oriented_Programming.html#encapsulation-data-integrity","title":"Encapsulation: Data Integrity","text":"<p>Encapsulation promotes data integrity by restricting direct access to an object's attributes. It's not just about making attributes private; it's about providing controlled access through public methods.</p> <pre><code>class Cat:\n    def __init__(self, name, age):\n        self.__name = name  # Private attribute\n        self.__age = age    # Private attribute\n\n    # Getter and setter methods for name\n    def get_name(self):\n        return self.__name\n\n    def set_name(self, name):\n        self.__name = name\n\n    # Getter and setter methods for age\n    def get_age(self):\n        return self.__age\n\n    def set_age(self, age):\n        if age &lt; 0:\n            raise ValueError(\"Age cannot be negative.\")\n        else:\n            self.__age = age\n</code></pre> <p>Usage:</p> <pre><code>my_cat = Cat(\"Whiskers\", 5)\nmy_cat.set_name(\"Mr. Whiskers\")\nmy_cat.set_age(-1)  # Raises Error\nmy_cat.set_age(6)\nprint(my_cat.description())  # Output: Mr. Whiskers is 6 years old\n</code></pre>"},{"location":"Python101/Object_Oriented_Programming.html#polymorphism-interface-flexibility","title":"Polymorphism: Interface Flexibility","text":"<p>Polymorphism allows objects of different classes to be treated through a common interface.</p> <pre><code>class Siamese(Cat):\n    def speak(self, sound=\"meezer\"):\n        return super().speak(sound)\n\ndef cat_speak(cat: Cat):\n    print(cat.speak())\n\nsiamese = Siamese(\"Luna\", 3)\npersian = Persian(\"Ginger\", 5)\n\ncat_speak(siamese)  # Output: Luna says meezer\ncat_speak(persian)  # Output: Ginger says purr\n</code></pre>"},{"location":"Python101/Object_Oriented_Programming.html#examples","title":"Examples","text":""},{"location":"Python101/Object_Oriented_Programming.html#design-a-social-media-platform","title":"Design a Social Media Platform","text":"<p>Design a simplified model for a social media platform that captures interactions between users, posts, and comments.</p> <p>Solution:</p> <pre><code>class User:\n    def __init__(self, username):\n        self.username = username\n        self.posts = []\n\n    def create_post(self, content):\n        post = Post(self, content)\n        self.posts.append(post)\n        return post\n\nclass Post:\n    def __init__(self, user, content):\n        self.user = user\n        self.content = content\n        self.comments = []\n\n    def add_comment(self, content, user):\n        comment = Comment(user, content)\n        self.comments.append(comment)\n        return comment\n\nclass Comment:\n    def __init__(self, user, content):\n        self.user = user\n        self.content = content\n\n# Usage\nuser1 = User(\"john_doe\")\npost = user1.create_post(\"Hello, world!\")\nuser2 = User(\"jane_smith\")\ncomment = post.add_comment(\"Nice post!\", user2)\n\nprint(f\"{comment.user.username} commented on {post.user.username}'s post: {comment.content}\")\n</code></pre>"},{"location":"Python101/Object_Oriented_Programming.html#design-an-atm-system","title":"Design an ATM System","text":"<p>Create a simplified ATM system allowing users to perform transactions like balance inquiries and cash withdrawals.</p> <p>Solution:</p> <pre><code>class User:\n    def __init__(self, card_number, pin, account):\n        self.card_number = card_number\n        self.pin = pin\n        self.account = account\n\nclass Account:\n    def __init__(self, balance):\n        self.balance = balance\n\n    def withdraw(self, amount):\n        if amount &gt; self.balance:\n            print(\"Insufficient balance.\")\n            return False\n        self.balance -= amount\n        print(f\"Withdrew ${amount}. New balance: ${self.balance}.\")\n        return True\n\n    def check_balance(self):\n        print(f\"Account balance: ${self.balance}\")\n\nclass ATM:\n    def __init__(self, users):\n        self.users = users  # Dictionary: card number -&gt; User object\n\n    def authenticate_user(self, card_number, pin):\n        user = self.users.get(card_number)\n        if user and user.pin == pin:\n            return user\n        return None\n\n    def handle_transaction(self, user, transaction_type, amount=None):\n        if transaction_type == 'balance_inquiry':\n            user.account.check_balance()\n        elif transaction_type == 'withdrawal':\n            user.account.withdraw(amount)\n        else:\n            print(\"Invalid transaction type.\")\n\n# Usage example\naccount = Account(1000)\nuser = User(\"12345678\", \"1234\", account)\natm = ATM({\"12345678\": user})\n\nauthenticated_user = atm.authenticate_user(\"12345678\", \"1234\")\nif authenticated_user:\n    atm.handle_transaction(authenticated_user, 'balance_inquiry')\n    atm.handle_transaction(authenticated_user, 'withdrawal', 500)\n</code></pre> <p></p>"},{"location":"Python101/Python_Basics.html","title":"Python Basics","text":""},{"location":"Python101/Python_Basics.html#functions","title":"Functions","text":""},{"location":"Python101/Python_Basics.html#basic-structure","title":"Basic Structure","text":"<pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\ngreet(\"Alice\")\n</code></pre>"},{"location":"Python101/Python_Basics.html#default-arguments","title":"Default Arguments","text":"<pre><code>def greet(name=\"User\"):\n    print(f\"Hello, {name}!\")\n</code></pre>"},{"location":"Python101/Python_Basics.html#functions-as-first-class-citizens","title":"Functions as First-Class Citizens","text":"<p>In Python, functions are first-class citizens. This means you can use functions as variables, pass them as arguments to other functions, and return them from functions.</p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\ndef caller(func, arg):\n    return func(arg)\n\nprint(caller(greet, \"Alice\"))  # Output: Hello, Alice!\n</code></pre>"},{"location":"Python101/Python_Basics.html#data-types","title":"Data Types","text":"<p>Common Data Types:</p> <ul> <li><code>int</code> (e.g., <code>age = 25</code>)</li> <li><code>float</code> (e.g., <code>height = 5.9</code>)</li> <li><code>bool</code> (e.g., <code>is_student = True</code>)</li> <li><code>str</code> (e.g., <code>name = \"Alice\"</code>)</li> <li><code>list</code> (e.g., <code>nums = [3, 1, 4]</code>)</li> <li><code>NoneType</code> (e.g., <code>status = None</code>)</li> </ul> <p>Example: <pre><code>name = \"Alice\"\nage = 25\nprint(name + \" is \" + str(age) + \" years old.\")\nprint(f\"{name} is {age} years old.\")\n</code></pre></p>"},{"location":"Python101/Python_Basics.html#type-conversion","title":"Type Conversion","text":"<p>Python provides functions to convert data between types: <pre><code>num_str = \"100\"\nnum = int(num_str)\nprint(float(num))  # 100.0\n</code></pre></p>"},{"location":"Python101/Python_Basics.html#logical-operators","title":"Logical Operators","text":"<ul> <li><code>and</code>: Returns <code>True</code> if both conditions are <code>True</code>.</li> <li><code>or</code>: Returns <code>True</code> if at least one condition is <code>True</code>.</li> <li><code>not</code>: Inverts a boolean value.</li> </ul>"},{"location":"Python101/Python_Basics.html#truthy-and-falsey","title":"Truthy and Falsey","text":"<pre><code>if []:  # An empty list is False\n    print(\"This won't print.\")\nif [1, 2]:  # A non-empty list is True\n    print(\"This will print.\")\n</code></pre>"},{"location":"Python101/Python_Basics.html#input","title":"<code>input()</code>","text":"<p>The <code>input()</code> function allows users to provide input to the program during runtime:</p> <pre><code>name = input(\"What is your name? \")\nprint(f\"Hello, {name}!\")\n\nage = int(input(\"Enter your age: \"))\nprint(f\"You will be {age + 1} next year!\")\n</code></pre>"},{"location":"Python101/Python_Basics.html#file-handling","title":"File Handling","text":"<pre><code># Writing to a file\nwith open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, Python!\")\n\n# Reading from a file\nwith open(\"example.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n</code></pre>"},{"location":"Python101/Python_Basics.html#common-python-errors","title":"Common Python Errors","text":""},{"location":"Python101/Python_Basics.html#syntaxerror","title":"SyntaxError","text":"<pre><code>print(\"Hello)  # Missing closing quotation\n</code></pre>"},{"location":"Python101/Python_Basics.html#typeerror","title":"TypeError","text":"<pre><code>\"2\" + 2  # Can't add string and integer\n</code></pre>"},{"location":"Python101/Python_Basics.html#nameerror","title":"NameError","text":"<pre><code>print(x)  # x is not defined\n</code></pre>"},{"location":"Python101/Python_Basics.html#indexerror","title":"IndexError","text":"<pre><code>['cat', 'dog', 'rabbit'][3] # IndexError: list index out of range\n</code></pre>"},{"location":"Python101/Python_Basics.html#comments","title":"Comments","text":""},{"location":"Python101/Python_Basics.html#single-line-comments","title":"Single-Line Comments","text":"<pre><code># This is a comment\nprint(\"Hello!\")  # Another comment\n</code></pre>"},{"location":"Python101/Python_Basics.html#multi-line-comments","title":"Multi-Line Comments","text":"<pre><code>'''\nThis is a multi-line comment.\nUseful for longer explanations.\n'''\nprint(\"Hello!\")\n</code></pre>"},{"location":"Python101/pip.html","title":"Dependency Management with <code>pip</code>","text":""},{"location":"Python101/pip.html#introduction-to-pip","title":"Introduction to <code>pip</code>","text":"<p><code>pip</code>, the standard package manager for Python, is an essential tool that allows developers to install and manage libraries and dependencies not included in the Python standard library. Using <code>pip</code> simplifies your development workflow and ensures compatibility across environments.</p>"},{"location":"Python101/pip.html#getting-started-with-pip","title":"Getting Started with <code>pip</code>","text":"<p>Before diving into <code>pip</code>, let\u2019s confirm that it\u2019s installed on your system. Modern Python installations come with <code>pip</code> pre-installed. Verify the installation using:</p> <pre><code>pip --version\n</code></pre> <p>Example output: <pre><code>pip 24.3.1 from /usr/local/lib/python3.12.7/site-packages (python 3.12)\n</code></pre></p> <p>If <code>pip</code> isn\u2019t installed, you can add it using the <code>ensurepip</code> module:</p> <pre><code>python -m ensurepip --upgrade\n</code></pre>"},{"location":"Python101/pip.html#using-pip-in-a-virtual-environment","title":"Using <code>pip</code> in a Virtual Environment","text":"<p>To avoid dependency conflicts between projects, it\u2019s highly recommended to use a virtual environment. Virtual environments isolate dependencies for each project, keeping your global Python installation clean.</p> <ol> <li> <p>Create a Virtual Environment: <pre><code>python -m venv myenv\n</code></pre></p> </li> <li> <p>Activate the Virtual Environment: <pre><code>source myenv/bin/activate\n</code></pre> Once activated, your terminal prompt will change to indicate you\u2019re working within the virtual environment: <pre><code>(myenv) user@machine:~/project$\n</code></pre></p> </li> <li> <p>Install Packages in the Virtual Environment: <pre><code>pip install [package_name]\n</code></pre></p> </li> </ol>"},{"location":"Python101/pip.html#interesting-libraries","title":"Interesting Libraries","text":""},{"location":"Python101/pip.html#making-http-requests-with-requests","title":"Making HTTP Requests with <code>requests</code>","text":"<p><code>requests</code> is a popular library for interacting with APIs and web services.</p> <p>Install:</p> <pre><code>pip install requests\n</code></pre> <p>Example:</p> <pre><code>import requests\n\nresponse = requests.get(\"https://api.github.com\")\n\nprint(\"Status Code:\", response.status_code)  # Check if the request was successful\nprint(\"Headers:\", response.headers)           # Get the response headers\n</code></pre>"},{"location":"Python101/pip.html#visualize-data-with-matplotlib","title":"Visualize Data with <code>matplotlib</code>","text":"<p><code>matplotlib</code> helps you create a variety of plots.</p> <p>Install:</p> <pre><code>pip install matplotlib\n</code></pre> <p>Example:</p> <pre><code>import matplotlib.pyplot as plt\n\n# Data to plot\ncategories = ['Python', 'Java', 'C++', 'JavaScript']\npopularity = [85, 75, 70, 65]\n\n# Create a bar chart\nplt.bar(categories, popularity, color='skyblue')\nplt.title('Programming Language Popularity')\nplt.show()\n</code></pre>"},{"location":"Python101/pip.html#automate-tasks-with-pyautogui","title":"Automate Tasks with <code>pyautogui</code>","text":"<p>The <code>pyautogui</code> package allows you to automate mouse and keyboard actions.</p> <p>Install:</p> <pre><code>pip install pyautogui\n</code></pre> <p>Example:</p> <pre><code>import pyautogui\n\n# Take a screenshot\nscreenshot = pyautogui.screenshot()\nscreenshot.save(\"screenshot.png\")\n\n# Automate mouse movement\npyautogui.moveTo(100, 100, duration=1)\n</code></pre>"},{"location":"Python101/pip.html#scrape-the-web-with-beautifulsoup","title":"Scrape the Web with <code>BeautifulSoup</code>","text":"<p><code>BeautifulSoup</code> is a popular library for web scraping.</p> <p>Install: <pre><code>pip install beautifulsoup4\n</code></pre> Example:</p> <pre><code>from bs4 import BeautifulSoup\nimport requests\n\n## Fetch webpage content\nurl = \"https://example.com\"\nresponse = requests.get(url)\n\n# Parse HTML\nsoup = BeautifulSoup(response.text, \"html.parser\")\nprint(\"Page Title:\", soup.title.string)\n</code></pre>"},{"location":"Python101/pip.html#analyze-text-with-nltk","title":"Analyze Text with nltk","text":"<p>The <code>nltk</code> package is ideal for natural language processing tasks like tokenization, sentiment analysis, and more.</p> <p>Install:</p> <pre><code>pip install nltk\n</code></pre> <p>Example: <pre><code>import nltk\nfrom nltk.tokenize import word_tokenize\n\nnltk.download('punkt')\ntext = \"Python is amazing for data analysis!\"\ntokens = word_tokenize(text)\nprint(\"Tokens:\", tokens)\n</code></pre></p>"},{"location":"Python101/pip.html#create-games-with-pygame","title":"Create Games with <code>pygame</code>","text":"<p>The <code>pygame</code> library is perfect for game development.</p> <p>Install:</p> <pre><code>pip install pygame\n</code></pre> <p>Example: <pre><code>import pygame\n\n# Initialize pygame\npygame.init()\n\n# Create a game window\nscreen = pygame.display.set_mode((400, 300))\npygame.display.set_caption(\"Simple Game\")\n\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\npygame.quit()\n</code></pre></p>"},{"location":"Python101/pip.html#visualize-data-with-seaborn","title":"Visualize Data with <code>seaborn</code>","text":"<p><code>seaborn</code> makes it easy to create attractive and informative visualizations.</p> <p>Install:</p> <pre><code>pip install seaborn\n</code></pre> <p>Example: <pre><code>import seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Sample data\ntips = sns.load_dataset(\"tips\")\nsns.boxplot(x=\"day\", y=\"total_bill\", data=tips)\n\nplt.title(\"Boxplot of Total Bill by Day\")\nplt.show()\n</code></pre></p>"},{"location":"Python101/pip.html#generate-word-clouds-with-wordcloud","title":"Generate Word Clouds with <code>wordcloud</code>","text":"<p>The <code>wordcloud</code> package is great for visualizing text data creatively.</p> <p>Install:</p> <pre><code>pip install wordcloud\n</code></pre> <p>Example:</p> <pre><code>from wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n# Text data\ntext = \"Python is amazing. Python is fun. Python is versatile.\"\n\n# Generate word cloud\nwordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)\n\n# Display the word cloud\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()\n</code></pre>"},{"location":"Python101/pip.html#automate-dependency-management-with-pip-freeze","title":"Automate Dependency Management with <code>pip freeze</code>","text":"<p>When collaborating, sharing dependencies is crucial. Use <code>pip freeze</code> to generate a <code>requirements.txt</code> file:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Example requirements.txt file: <pre><code>requests==2.26.0\nmatplotlib==3.4.3\n</code></pre></p> <p>Your colleagues can then recreate your environment using:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"Python101/pip.html#bonus-discover-libraries-on-pypi","title":"Bonus: Discover Libraries on PyPI","text":"<p>Explore the Python Package Index (PyPI) to find libraries for web scraping, game development, data analysis, and more!</p> <p></p>"}]}